// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "Treshold.h"
IplImage *src;
IplImage *trsh;
static char *tnames[]={ "THRESH BINARY",
                "THRESH BINARY INV",
                "THRESH TRUNC",
                "TRESH TOZERO",             
                "THRESH TOZERO INV"
};
static int types[]={CV_THRESH_BINARY,CV_THRESH_BINARY_INV,CV_THRESH_TRUNC,CV_THRESH_TOZERO,CV_THRESH_TOZERO_INV};
Fl_OpenCV *Pict;

Fl_Double_Window *Win=(Fl_Double_Window *)0;

Fl_Button *Open=(Fl_Button *)0;

Fl_Scroll *Board=(Fl_Scroll *)0;

Fl_Output *FName=(Fl_Output *)0;

Fl_Value_Slider *Thresh=(Fl_Value_Slider *)0;

static void cb_Thresh(Fl_Value_Slider*, void*) {
  Apply();
}

Fl_Choice *Type=(Fl_Choice *)0;

static void cb_Type(Fl_Choice*, void*) {
  Apply();
}

Fl_Value_Slider *Max=(Fl_Value_Slider *)0;

static void cb_Max(Fl_Value_Slider*, void*) {
  Apply();
}

Fl_Button *Save=(Fl_Button *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = Win = new Fl_Double_Window(772, 610, "Treshold  with Fl_OpenCv 0.3 by BlueKid");
    w = o;
    o->color((Fl_Color)23);
    { Fl_Button* o = Open = new Fl_Button(461, 4, 30, 26, "...");
      o->tooltip("Select and Open Image File");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)4);
      o->labelfont(1);
      o->labelsize(18);
      o->callback((Fl_Callback*)Open_CB);
    }
    { Fl_Scroll* o = Board = new Fl_Scroll(10, 65, 750, 535);
      o->color((Fl_Color)23);
      Pict=new Fl_OpenCV(Board->x(),Board->y());
      Board->add(Pict);
      o->end();
    }
    FName = new Fl_Output(55, 6, 396, 24, "Image :");
    { Fl_Value_Slider* o = Thresh = new Fl_Value_Slider(70, 35, 417, 20, "Treshold:");
      o->type(1);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)4);
      o->maximum(255);
      o->step(1);
      o->textsize(14);
      o->callback((Fl_Callback*)cb_Thresh);
      o->align(FL_ALIGN_LEFT);
      o->deactivate();
    }
    { Fl_Choice* o = Type = new Fl_Choice(575, 6, 190, 24, "Type:");
      o->down_box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_Type);
      o->deactivate();
      LoadTypes();
    }
    { Fl_Value_Slider* o = Max = new Fl_Value_Slider(590, 35, 175, 20, "Max value:");
      o->type(1);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)1);
      o->maximum(255);
      o->step(1);
      o->value(255);
      o->textsize(14);
      o->callback((Fl_Callback*)cb_Max);
      o->align(FL_ALIGN_LEFT);
      o->deactivate();
    }
    { Fl_Button* o = Save = new Fl_Button(495, 4, 30, 26, "Save");
      o->tooltip("Save Image File");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)4);
      o->labelfont(1);
      o->labelsize(10);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)Save_CB);
      o->deactivate();
    }
    o->end();
  }
  return w;
}

int main(int argc, char **argv) {
  Fl_Window  * window;
src=0;
trsh=0;
window = make_window( );
Fl::set_atclose(Close);
window->show( argc, argv );
return ( Fl :: run( ) );
  return Fl::run();
}

void Open_CB(Fl_Widget*,void*) {
  char* file;

file = fl_file_chooser("Open", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
if(file==NULL) return;
int clr;
clr=fl_choice("Load Image ?", "as Gray Scale","as 3 Channel Color Scale",NULL);
FName->value(file);

if(src)
 cvReleaseImage(&src);
if(trsh)
 cvReleaseImage(&trsh);

Pict->Load(file, clr);
Thresh->activate();
Type->activate();
Max->activate();
Save->activate();
src=cvCloneImage(Pict->image);
trsh = cvCloneImage( src );
Board->redraw();
}

void LoadTypes() {
  for(int i=0;i<5;i++)
Type->add(tnames[i]);
Type->value(0);
}

void Apply() {
  cvThreshold(src, trsh, Thresh->value(), Max->value(), types[Type->value()]);
Pict->SetImage(trsh);
Board->redraw();
}

void Close(Fl_Window*,void*) {
  if(src)
 cvReleaseImage(&src);
if(trsh)
 cvReleaseImage(&trsh);
exit(0);
}

void Save_CB(Fl_Widget*,void*) {
  char* file=NULL;
file = fl_file_chooser("Save", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", file);
if(file==NULL) return;
Pict->Save(file);
}
