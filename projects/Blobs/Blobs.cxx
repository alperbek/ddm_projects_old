// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "Blobs.h"
IplImage *src;
CBlobResult blobs;
Fl_OpenCV *Pict;

Fl_Double_Window *Win=(Fl_Double_Window *)0;

Fl_Button *Open=(Fl_Button *)0;

Fl_Scroll *Board=(Fl_Scroll *)0;

Fl_Output *FName=(Fl_Output *)0;

Fl_Button *Save=(Fl_Button *)0;

Fl_Button *Find=(Fl_Button *)0;

static void cb_Find(Fl_Button*, void*) {
  Apply();
}

Fl_Counter *No=(Fl_Counter *)0;

static void cb_No(Fl_Counter*, void*) {
  ShowBlob();
}

Fl_Value_Slider *Thresh=(Fl_Value_Slider *)0;

Fl_Value_Slider *MBlob=(Fl_Value_Slider *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = Win = new Fl_Double_Window(619, 610, "FindBlobs  by BlueKid");
    w = o;
    o->tooltip("http://derindelimavi.blogspot.com/");
    o->color((Fl_Color)23);
    { Fl_Button* o = Open = new Fl_Button(425, 4, 30, 26, "...");
      o->tooltip("Open");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)4);
      o->labelfont(1);
      o->labelsize(18);
      o->callback((Fl_Callback*)Open_CB);
    }
    { Fl_Scroll* o = Board = new Fl_Scroll(10, 65, 610, 545);
      o->color((Fl_Color)20);
      Pict=new Fl_OpenCV(Board->x(),Board->y());
      Board->add(Pict);
      o->end();
    }
    FName = new Fl_Output(55, 6, 360, 24, "Image :");
    { Fl_Button* o = Save = new Fl_Button(540, 4, 65, 26, "Save Blobs");
      o->tooltip("Open");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)4);
      o->labelfont(1);
      o->labelsize(10);
      o->callback((Fl_Callback*)Save_CB);
      o->deactivate();
    }
    { Fl_Button* o = Find = new Fl_Button(460, 4, 70, 26, "Find Blobs");
      o->tooltip("Open");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)4);
      o->labelfont(1);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Find);
      o->deactivate();
    }
    { Fl_Counter* o = No = new Fl_Counter(50, 35, 95, 24, "Blob :");
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)14);
      o->labelcolor((Fl_Color)1);
      o->minimum(0);
      o->maximum(10);
      o->step(1);
      o->callback((Fl_Callback*)cb_No);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = Thresh = new Fl_Value_Slider(456, 34, 149, 26, "Thrsh :");
      o->tooltip("Threshold");
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)14);
      o->maximum(255);
      o->step(1);
      o->value(100);
      o->textsize(14);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Value_Slider* o = MBlob = new Fl_Value_Slider(213, 36, 184, 24, "Min Blob");
      o->tooltip("discard the blobs with less area ...  pixels");
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)14);
      o->minimum(1);
      o->maximum(5000);
      o->step(1);
      o->value(1000);
      o->textsize(14);
      o->align(FL_ALIGN_LEFT);
    }
    o->end();
  }
  return w;
}

int main(int argc, char **argv) {
  Fl_Window  * window;
src=0;
window = make_window( );
Fl::set_atclose(Close);
window->show( argc, argv );
return ( Fl :: run( ) );
  return Fl::run();
}

void Open_CB(Fl_Widget*,void*) {
  char* file;

file = fl_file_chooser("Open", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
if(file==NULL) return;

FName->value(file);

if(src)
 cvReleaseImage(&src);
 
blobs.ClearBlobs();
No->deactivate();

Pict->Load(file, 0);
Save->activate();
Find->activate();
src=cvCloneImage(Pict->image);
Board->redraw();
}

void Apply() {
  int nblobs;
blobs = CBlobResult( src, NULL, Thresh->value(), true );
blobs.Filter( blobs, B_INCLUDE, CBlobGetArea(), B_GREATER, MBlob->value());
nblobs=blobs.GetNumBlobs();
if(nblobs){ 
  fl_message("%d Blobs Found ( Area >=  %.0f pixel )",nblobs,MBlob->value());
  No->maximum(blobs.GetNumBlobs() - 1);
  No->activate();
  No->value(0);
  ShowBlob();
}
else
  fl_message("Nothing Found !  :( ");
}

void Close(Fl_Window*,void*) {
  if(src)
 cvReleaseImage(&src);
exit(0);
}

void Save_CB(Fl_Widget*,void*) {
  char* file=NULL;
file = fl_file_chooser("Save", "Blob List(*.{txt})\t", file);
if(file==NULL) return;
blobs.PrintBlobs(file);
}

void ShowBlob() {
  IplImage *outputImage;
outputImage = cvCreateImage( cvSize( src->width, src->height ), IPL_DEPTH_8U, 3 );
cvMerge( src, src, src, NULL, outputImage );
CBlob bl;
blobs.GetNthBlob( CBlobGetPerimeter(), No->value(), bl);
bl.FillBlob( outputImage, CV_RGB( 255, 0, 0 ));
Pict->SetImage(outputImage);
Board->redraw();
}
