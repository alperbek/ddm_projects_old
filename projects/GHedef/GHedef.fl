# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
decl {\#include "fga.hpp"} {public
} 

decl {\#include <cstdlib>} {public
} 

decl {\#include <cstring>} {public
} 

decl {\#include <vector>} {public
} 

decl {\#include <algorithm>} {public
} 

decl {using namespace fga;} {public
} 

decl {using namespace std;} {public
} 

decl {vector<int> Inputs;} {public
} 

decl {int Output;} {public
} 

decl {typedef struct {
   int Num[6];
   int Op[5];
}PData ;} {public
} 

Function {make_window()} {} {
  Fl_Window Main {
    label {Genetik Metodla Bir iþlem } open
    xywh {512 181 468 534} type Double box PLASTIC_UP_BOX color 19 labeltype NO_LABEL visible
  } {
    Fl_Button {} {
      label Solve
      callback {GetInputs();
PopulationMT<int> my_population(1, 400, 11, my_fitness, NULL, NULL, my_crossover, my_mutate_chromosome, my_random_chromosome);
  float mutation_rate = 0.1;
  my_population.set_mutation_rate(mutation_rate);
  int best[11];
  float score = 0,sold=1;
  int count1=0;
  int count2=0;

  while (score!=1) {
    my_population.cycle();
    score = my_population.get_all_time_best_score();
    memcpy(best, my_population.get_all_time_best(), 11 * sizeof(int));
    count1++;
    count2++;
    if(mutation_rate < 0.9 && count2/100){
			mutation_rate += 0.1;
        	my_population.set_mutation_rate(mutation_rate);
        	count2=0;
        }
        if(count1==1100){
          Out->add("Best solution finded for 1100 generations." );
          break;
        }

        Gen->value(my_population.get_generations());
	Mut->value(mutation_rate);
        Progress->value(count1);


        
//        printf("Sonuc: %f\\n" ,Calculate((PData *)best));
        Sonuc((PData *)best);
    	sold=score;
 	Pr->redraw();
    	Fl::wait(0);

    }


PData *p=(PData *)best;
int op;
char buf[500]="";
float tmp=p->Num[0];
   for(int i=0; i<5;i++){
     sprintf(buf,"%0.2f ",tmp);
     op=p->Op[i];
     switch(op){
         case 0: sprintf(buf,"%s+ ",buf);
                 tmp +=p->Num[i+1];
                 break;
         case 1: sprintf(buf,"%s- ",buf);  // Çýkar
                 tmp -=p->Num[i+1];         
                 break;
         case 2: sprintf(buf,"%s* ",buf);  // Çarp
                 tmp *=p->Num[i+1];         
                 break;
         case 3: sprintf(buf,"%s/ ",buf);  // Böl
                 tmp /=p->Num[i+1];         
                 break;
         case 4: buf[0]=0;
                 continue;     // kullanma
                 break;

     }
     sprintf(buf,"%s%d = %0.2f",buf,p->Num[i+1],tmp);
     Out->add(buf);
     buf[0]=0;
     
   }
Out->add("");}
      tooltip {Çöz} xywh {250 15 200 55} box PLASTIC_UP_BOX color 14 labelfont 3 labelsize 18 labelcolor 1
    }
    Fl_Input Target {
      label {Target:}
      tooltip {Ulaþýlacak Deðer} xywh {65 16 90 52} type Int box PLASTIC_DOWN_BOX color 4 textsize 44 textcolor 1
    }
    Fl_Input Input1 {
      xywh {15 86 55 49} type Int textsize 44
    }
    Fl_Input Input2 {
      xywh {83 86 55 49} type Int textsize 44
    }
    Fl_Input Input3 {
      xywh {151 86 55 49} type Int textsize 44
    }
    Fl_Input Input4 {
      xywh {219 86 55 48} type Int textsize 44
    }
    Fl_Input Input5 {
      xywh {287 86 75 49} type Int textsize 44
    }
    Fl_Input Input6 {
      xywh {375 86 80 49} type Int textsize 44
    }
    Fl_Browser Out {selected
      xywh {15 240 440 255} box PLASTIC_DOWN_BOX
    }
    Fl_Button {} {
      label Random
      callback {Random();
SetInputs();
Out->clear();}
      tooltip {Rastgele Problem} xywh {165 15 70 55} box PLASTIC_UP_BOX color 14 labelcolor 1
    }
    Fl_Group Pr {open
      xywh {10 145 440 85}
    } {
      Fl_Progress Progress {
        xywh {10 145 440 15} box PLASTIC_DOWN_BOX color 23 selection_color 4
        code0 {Progress->maximum(1100);}
      }
      Fl_Value_Output Gen {
        label {Generation ::}
        xywh {100 171 90 22}
      }
      Fl_Value_Output Mut {
        label {Mutation Rate::}
        xywh {400 168 50 22}
      }
      Fl_Output Sol {
        label {Solution:}
        xywh {75 206 375 24}
      }
    }
    Fl_Box {} {
      label {http://derindelimavi.blogspot.com/}
      xywh {15 503 440 22} box PLASTIC_UP_BOX color 6 labelcolor 1
    }
  }
} 

Function {} {} {
  code {Fl_Window  * window;
srand(time(NULL));
window = make_window( );
window->show( argc, argv );
return ( Fl :: run( ) );} {}
} 

Function {Calculate(PData *p)} {return_type float
} {
  code {float r,c1,c2;
   int op;
   r=p->Num[0];

   for(int i=0; i<5;i++){
     c1=r;
     c2=p->Num[i+1];
     op=p->Op[i];
     switch(op){
         case 0: r=c1+c2;  // Topla
                 break;
         case 1: r=c1-c2;  // Çýkar
                 break;
         case 2: r=c1*c2;  // Çarp
                 break;
         case 3: r=c1/c2;  // Böl
                 break;
         case 4: r=c1;     // kullanma
                 break;

     }

   }

    return r;} {}
} 

Function {my_fitness(int *chromosome)} {return_type float
} {
  code {float r;
    r=Calculate((PData *)chromosome);
    r=Output-r;

    if(r!=-1)
     r=1/(r+1);

	return r;} {}
} 

Function {my_random_chromosome(int *chromosome)} {} {
  code {PData *p=(PData *)chromosome;
    for(int i=0;i<5;i++)
     p->Op[i]=rand() % 5;
    random_shuffle (Inputs.begin(), Inputs.end());
    for(int i=0;i<6;i++)
      p->Num[i]=Inputs[i];} {}
} 

Function {my_mutate_chromosome(int *chromosome)} {} {
  code {PData *p=(PData *)chromosome;

    int a;
    int b;
    int tmp;

    for(int i=0;i<3;i++){
 //     int c=2;
//	  if(c){
	    a = rand() % 6;
	    b = rand() % 6;
	    tmp = p->Num[a];
	    p->Num[a]= p->Num[b];
	    p->Num[b] = tmp;
//	  }
//	  if(c==0||c==2){
        a = rand() % 5;
	    b = rand() % 5;
	    tmp = p->Op[a];
	    p->Op[a]= p->Op[b];
	    p->Op[b] = tmp;

//      }

    }} {}
} 

Function {Sonuc(PData *p)} {open
} {
  code {int op;
char buf[500]="";
   sprintf(buf,"%d ",p->Num[0]);
   for(int i=0; i<5;i++){
     op=p->Op[i];
     switch(op){
         case 0: sprintf(buf,"%s+ ",buf);
                 break;
         case 1: sprintf(buf,"%s- ",buf);  // Çýkar
                 break;
         case 2: sprintf(buf,"%s* ",buf);  // Çarp
                 break;
         case 3: sprintf(buf,"%s/ ",buf);  // Böl
                 break;
         case 4: continue;     // kullanma
                 break;

     }
     sprintf(buf,"%s%d ",buf,p->Num[i+1]);
   }
   
sprintf(buf,"%s = %0.2f ",buf,Calculate(p));   
   
Sol->value(buf);} {}
} 

Function {GetInputs()} {} {
  code {Inputs.clear();
Output= atoi(Target->value());
Inputs.push_back(atoi(Input1->value()));
Inputs.push_back(atoi(Input2->value()));
Inputs.push_back(atoi(Input3->value()));
Inputs.push_back(atoi(Input4->value()));
Inputs.push_back(atoi(Input5->value()));
Inputs.push_back(atoi(Input6->value()));} {}
} 

Function {SetInputs()} {} {
  code {char buf[10];

itoa(Output, buf, 10);
Target->value(buf);

itoa(Inputs[0], buf, 10);
Input1->value(buf);

itoa(Inputs[1], buf, 10);
Input2->value(buf);

itoa(Inputs[2], buf, 10);
Input3->value(buf);

itoa(Inputs[3], buf, 10);
Input4->value(buf);

itoa(Inputs[4], buf, 10);
Input5->value(buf);

itoa(Inputs[5], buf, 10);
Input6->value(buf);} {}
} 

Function {Random()} {} {
  code {Output= (rand() % 900)+100;
Inputs.clear();
for(int i=0;i<4;i++)
    Inputs.push_back((rand() %10)+1);
Inputs.push_back(25*((rand() %4)+1));  
Inputs.push_back(25*((rand() %4)+1));} {}
} 

Function {my_crossover(int *parent1, int *parent2)} {} {
  code {//    my_mutate_chromosome(parent1);
    my_random_chromosome(parent1);
//    my_mutate_chromosome(parent2);

    vector<int> v1,v2,vt;

	PData *p1=(PData *)parent1;
	PData *p2=(PData *)parent2;
	int i,tmp;
	for(i=0;i<3;i++){
	  tmp=p1->Op[i];
	  p1->Op[i]=p2->Op[i];
	  p2->Op[i]=tmp;
	}



	for(i=0;i<6;i++){
	  v1.push_back(p1->Num[i]);
	  v2.push_back(p2->Num[i]);
	}


	for(i=0;i<3;i++){
	  tmp=p1->Num[i];
	  p1->Num[i]=p2->Num[i];
      p2->Num[i]=tmp;
 	}
 	vector<int>::iterator pos;
 	for(i=0;i<3;i++){
      pos = find(v1.begin(),v1.end(),p1->Num[i]);
      if (pos != v1.end()) v1.erase(pos);
      pos = find(v2.begin(),v2.end(),p2->Num[i]);
      if (pos != v2.end()) v2.erase(pos);
 	}

 	for(i=0;i<3;i++){
      p1->Num[i+3]=v1[i];
      p2->Num[i+3]=v2[i];

 	}} {}
} 
