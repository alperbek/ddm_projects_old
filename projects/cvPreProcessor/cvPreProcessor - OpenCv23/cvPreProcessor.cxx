//
// cvPreProcessor, Visual Tool for OpenCv
// Copyright (C) 2008  BlueKid
// GUI tool for OpenCv 
// Programmed by BlueKid");
//  http://derindelimavi.blogspot.com/");
// Please Send me any suggestion, modification or bugs.");
// Don't hesitate to contact me for any question");
// I will be very grateful with your feedbacks.");
// bluekid70@gmail.com
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "cvPreProcessor.h"
const char Version[]="cvPreProcessor 1.0"; 
IplImage *img,*pimg,*timg; 
IplImage *mimg; 
Fl_OpenCV *orj,*proc; 
Processor *p; 

Fl_Color fl_hsv_color(double H, double S, double V) {
  double R, G, B;

H=H/30;
S=S/255;
V=V/255;
if(H>S)
 V=H;
else
 V=S;

if (S < 5.0e-6) {
    R = G = B = V;
  } else {
    int i = (int)H;  
    double f = H - (float)i;
    double p1 = V*(1.0-S);
    double p2 = V*(1.0-S*f);
    double p3 = V*(1.0-S*(1.0-f));
    switch (i) {
    case 0: R = V;   G = p3;  B = p1;  break;
    case 1: R = p2;  G = V;   B = p1;  break;
    case 2: R = p1;  G = V;   B = p3;  break;
    case 3: R = p1;  G = p2;  B = V;   break;
    case 4: R = p3;  G = p1;  B = V;   break;
    case 5: R = V;   G = p1;  B = p2;  break;
    }
  }
  return fl_rgb_color(255*R,255*G,255*B);
}

Fl_Group *Before=(Fl_Group *)0;

Fl_Group *After=(Fl_Group *)0;

static void cb_(Fl_Button*, void*) {
  p->CopyTo1();
}

static void cb_1(Fl_Button*, void*) {
  p->Load1();
}

Fl_Button *MemorySet1=(Fl_Button *)0;

static void cb_MemorySet1(Fl_Button*, void*) {
  p->CopyToMemory(1);
MemoryGet1->activate();
MemoryGet2->activate();
}

Fl_Button *MemoryGet1=(Fl_Button *)0;

static void cb_MemoryGet1(Fl_Button*, void*) {
  p->CopyFromMemory(1);
}

Fl_Button *MemorySet2=(Fl_Button *)0;

static void cb_MemorySet2(Fl_Button*, void*) {
  p->CopyToMemory(2);
MemoryGet1->activate();
MemoryGet2->activate();
}

static void cb_2(Fl_Button*, void*) {
  p->Load2();
}

Fl_Button *MemoryGet2=(Fl_Button *)0;

static void cb_MemoryGet2(Fl_Button*, void*) {
  p->CopyFromMemory(2);
}

static void cb_Open(Fl_Menu_*, void*) {
  p->Load1();
}

static void cb_Save(Fl_Menu_*, void*) {
  p->Save1();
}

static void cb_Open1(Fl_Menu_*, void*) {
  p->Load2();
}

static void cb_Save1(Fl_Menu_*, void*) {
  p->Save2();
}

static void cb_Capture(Fl_Menu_*, void*) {
  p->Capture();
}

static void cb_Clear(Fl_Menu_*, void*) {
  p->Clear();
}

static void cb_Undo(Fl_Menu_*, void*) {
  p->Undo();
}

static void cb_Save2(Fl_Menu_*, void*) {
  p->SaveCode();
}

static void cb_Exit(Fl_Menu_*, void*) {
  exit(0);
}

static void cb_Resize(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
ReSizeForm *op=new ReSizeForm();
op->show();
}

static void cb_Rotate(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
RotateForm *op=new RotateForm();
op->show();
}

static void cb_Histogram(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
HistForm *op=new HistForm();
op->show();
}

static void cb_RGB(Fl_Menu_*, void*) {
  p->RGBToGray();
}

static void cb_Split(Fl_Menu_*, void*) {
  p->SRed();
}

static void cb_Split1(Fl_Menu_*, void*) {
  p->SGreen();
}

static void cb_Split2(Fl_Menu_*, void*) {
  p->SBlue();
}

static void cb_Split3(Fl_Menu_*, void*) {
  p->SHue();
}

static void cb_Split4(Fl_Menu_*, void*) {
  p->SSaturation();
}

static void cb_Equalizes(Fl_Menu_*, void*) {
  p->EHist();
}

static void cb_Normal(Fl_Menu_*, void*) {
  p->NormalThreshold();
}

static void cb_Adaptive(Fl_Menu_*, void*) {
  p->AdaptiveThreshold();
}

static void cb_Options(Fl_Menu_*, void*) {
  ThresholdOptions *op=new ThresholdOptions();
op->show();
}

static void cb_Erode(Fl_Menu_*, void*) {
  p->Erode();
}

static void cb_Dilate(Fl_Menu_*, void*) {
  p->Dilate();
}

static void cb_Open2(Fl_Menu_*, void*) {
  p->Open();
}

static void cb_Close(Fl_Menu_*, void*) {
  p->Close();
}

static void cb_Gradient(Fl_Menu_*, void*) {
  p->Grad();
}

static void cb_Top(Fl_Menu_*, void*) {
  p->TopHat();
}

static void cb_Black(Fl_Menu_*, void*) {
  p->BlackHat();
}

static void cb_Options1(Fl_Menu_*, void*) {
  MorphOptions *op=new MorphOptions();
op->show();
}

static void cb_Sobel(Fl_Menu_*, void*) {
  p->Sobel();
}

static void cb_Laplace(Fl_Menu_*, void*) {
  p->Laplace();
}

static void cb_Canny(Fl_Menu_*, void*) {
  p->Canny();
}

static void cb_Options2(Fl_Menu_*, void*) {
  EdgeOptions *op=new EdgeOptions();
op->show();
}

static void cb_Add(Fl_Menu_*, void*) {
  p->Add();
}

static void cb_Subtract(Fl_Menu_*, void*) {
  p->Sub();
}

static void cb_Multiply(Fl_Menu_*, void*) {
  p->Mul();
}

static void cb_Division(Fl_Menu_*, void*) {
  p->Div();
}

static void cb_Max(Fl_Menu_*, void*) {
  p->Max();
}

static void cb_Min(Fl_Menu_*, void*) {
  p->Min();
}

static void cb_Absolute(Fl_Menu_*, void*) {
  p->AbsDiff();
}

static void cb_Equal(Fl_Menu_*, void*) {
  p->Compare(0);
}

static void cb_Greater(Fl_Menu_*, void*) {
  p->Compare(1);
}

static void cb_Greater1(Fl_Menu_*, void*) {
  p->Compare(2);
}

static void cb_Less(Fl_Menu_*, void*) {
  p->Compare(3);
}

static void cb_Less1(Fl_Menu_*, void*) {
  p->Compare(4);
}

static void cb_Not(Fl_Menu_*, void*) {
  p->Compare(5);
}

static void cb_And(Fl_Menu_*, void*) {
  p->And();
}

static void cb_Or(Fl_Menu_*, void*) {
  p->Or();
}

static void cb_Xor(Fl_Menu_*, void*) {
  p->Xor();
}

static void cb_Not1(Fl_Menu_*, void*) {
  p->Not();
}

static void cb_Smooth(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
SmoothForm *frm=new SmoothForm();
frm->show();
}

static void cb_Filter2D(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
Filter2DForm *frm=new Filter2DForm();
frm->show();
}

static void cb_Color(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
if(img->nChannels!=3){
  fl_alert("Source image must me color");
  return; 
}
HSFilterForm *frm=new HSFilterForm();
frm->show();
}

static void cb_Color1(Fl_Menu_*, void*) {
  if(img==NULL)   return;  
if(img->nChannels!=3){
  fl_alert("Source image must me color");
  return; 
}
RGBFilterForm *frm=new RGBFilterForm();
frm->show();
}

static void cb_About(Fl_Menu_*, void*) {
  AboutDlg *ab=new AboutDlg();
ab->show();
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Image 1", 0,  (Fl_Callback*)cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save  Image 1", 0,  (Fl_Callback*)cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Image 2", 0,  (Fl_Callback*)cb_Open1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save  Image 2", 0,  (Fl_Callback*)cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Capture", 0,  (Fl_Callback*)cb_Capture, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clear All", 0,  (Fl_Callback*)cb_Clear, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Undo", 0xff08,  (Fl_Callback*)cb_Undo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Code", 0,  (Fl_Callback*)cb_Save2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Image", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Resize", 0,  (Fl_Callback*)cb_Resize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Rotate", 0,  (Fl_Callback*)cb_Rotate, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Histogram + Statistics", 0,  (Fl_Callback*)cb_Histogram, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Color", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"RGB To Gray", 0,  (Fl_Callback*)cb_RGB, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Red", 0,  (Fl_Callback*)cb_Split, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Green", 0,  (Fl_Callback*)cb_Split1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Blue", 0,  (Fl_Callback*)cb_Split2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Hue", 0,  (Fl_Callback*)cb_Split3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Split Saturation", 0,  (Fl_Callback*)cb_Split4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Equalizes histogram", 0,  (Fl_Callback*)cb_Equalizes, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Threshold", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal", 0,  (Fl_Callback*)cb_Normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Adaptive", 0,  (Fl_Callback*)cb_Adaptive, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Options", 0,  (Fl_Callback*)cb_Options, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Morphology", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Erode", 0,  (Fl_Callback*)cb_Erode, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Dilate", 0,  (Fl_Callback*)cb_Dilate, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open", 0,  (Fl_Callback*)cb_Open2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Close", 0,  (Fl_Callback*)cb_Close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Gradient", 0,  (Fl_Callback*)cb_Gradient, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Top hat", 0,  (Fl_Callback*)cb_Top, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Black hat", 0,  (Fl_Callback*)cb_Black, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Options", 0,  (Fl_Callback*)cb_Options1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Edge Detections", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sobel", 0,  (Fl_Callback*)cb_Sobel, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Laplace", 0,  (Fl_Callback*)cb_Laplace, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Canny", 0,  (Fl_Callback*)cb_Canny, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Options", 0,  (Fl_Callback*)cb_Options2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Arithmetical", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add", 0x8002b,  (Fl_Callback*)cb_Add, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Subtract", 0x8002d,  (Fl_Callback*)cb_Subtract, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Multiply", 0x8002a,  (Fl_Callback*)cb_Multiply, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Division", 0x8002f,  (Fl_Callback*)cb_Division, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Max", 0,  (Fl_Callback*)cb_Max, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Min", 0,  (Fl_Callback*)cb_Min, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Absolute Diff", 0,  (Fl_Callback*)cb_Absolute, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Compare", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Equal to", 0,  (Fl_Callback*)cb_Equal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Greater than", 0,  (Fl_Callback*)cb_Greater, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Greater or Equal", 0,  (Fl_Callback*)cb_Greater1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Less than", 0,  (Fl_Callback*)cb_Less, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Less or Equal", 0,  (Fl_Callback*)cb_Less1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Not Equal to", 0,  (Fl_Callback*)cb_Not, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Logical", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"And", 0,  (Fl_Callback*)cb_And, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Or", 0,  (Fl_Callback*)cb_Or, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Xor", 0,  (Fl_Callback*)cb_Xor, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Not", 0,  (Fl_Callback*)cb_Not1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Filtering", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Smooth", 0,  (Fl_Callback*)cb_Smooth, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Filter2D", 0,  (Fl_Callback*)cb_Filter2D, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Color - HS", 0,  (Fl_Callback*)cb_Color, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Color RGB", 0,  (Fl_Callback*)cb_Color1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Browser *Output=(Fl_Browser *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(1064, 678, "cvPreProcessor ");
    w = o;
    o->color((Fl_Color)31);
    o->labelcolor((Fl_Color)1);
    { Fl_Group* o = new Fl_Group(10, 50, 1044, 364);
      { Before = new Fl_Group(10, 50, 484, 364, "Image 1 ( img )");
        Before->box(FL_EMBOSSED_BOX);
        Before->color((Fl_Color)31);
        Before->align(FL_ALIGN_TOP_LEFT);
        orj=new Fl_OpenCV(Before->x()+2,Before->y()+2,Before->w()-2,Before->h()-2);
        orj->FitWindows();
        Before->end();
      } // Fl_Group* Before
      { After = new Fl_Group(570, 50, 484, 364, "Image 2 ( pimg )");
        After->box(FL_EMBOSSED_BOX);
        After->color((Fl_Color)31);
        After->align(FL_ALIGN_TOP_LEFT);
        proc=new Fl_OpenCV(After->x()+2,After->y()+2,After->w()-2,After->h()-2);
        proc->FitWindows();
        After->end();
      } // Fl_Group* After
      { Fl_Button* o = new Fl_Button(505, 210, 55, 26, "@<-");
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)21);
        o->labelcolor((Fl_Color)3);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(495, 50, 30, 20, "...");
        o->tooltip("Open File");
        o->box(FL_GTK_THIN_UP_BOX);
        o->color((Fl_Color)21);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { MemorySet1 = new Fl_Button(495, 81, 30, 25, "@-> M");
        MemorySet1->tooltip("Copy to Memory");
        MemorySet1->box(FL_GTK_THIN_UP_BOX);
        MemorySet1->color((Fl_Color)21);
        MemorySet1->labelsize(10);
        MemorySet1->labelcolor((Fl_Color)1);
        MemorySet1->callback((Fl_Callback*)cb_MemorySet1);
      } // Fl_Button* MemorySet1
      { MemoryGet1 = new Fl_Button(495, 116, 30, 25, "@<-  M");
        MemoryGet1->tooltip("Copy form Memory");
        MemoryGet1->box(FL_GTK_THIN_UP_BOX);
        MemoryGet1->color((Fl_Color)21);
        MemoryGet1->labelsize(10);
        MemoryGet1->labelcolor((Fl_Color)1);
        MemoryGet1->callback((Fl_Callback*)cb_MemoryGet1);
        MemoryGet1->deactivate();
      } // Fl_Button* MemoryGet1
      { MemorySet2 = new Fl_Button(540, 285, 30, 25, "M @<-");
        MemorySet2->tooltip("Copy to Memory");
        MemorySet2->box(FL_GTK_THIN_UP_BOX);
        MemorySet2->color((Fl_Color)21);
        MemorySet2->labelsize(10);
        MemorySet2->labelcolor((Fl_Color)1);
        MemorySet2->callback((Fl_Callback*)cb_MemorySet2);
      } // Fl_Button* MemorySet2
      { Fl_Button* o = new Fl_Button(540, 260, 30, 20, "...");
        o->tooltip("Open File");
        o->box(FL_GTK_THIN_UP_BOX);
        o->color((Fl_Color)21);
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { MemoryGet2 = new Fl_Button(540, 315, 30, 25, "M @->");
        MemoryGet2->tooltip("Copy form Memory");
        MemoryGet2->box(FL_GTK_THIN_UP_BOX);
        MemoryGet2->color((Fl_Color)21);
        MemoryGet2->labelsize(10);
        MemoryGet2->labelcolor((Fl_Color)1);
        MemoryGet2->callback((Fl_Callback*)cb_MemoryGet2);
        MemoryGet2->deactivate();
      } // Fl_Button* MemoryGet2
      o->end();
    } // Fl_Group* o
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1064, 25);
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)19);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Output = new Fl_Browser(5, 416, 1044, 244);
      Output->type(3);
      Output->box(FL_DOWN_BOX);
      Output->color((Fl_Color)19);
    } // Fl_Browser* Output
    o->label(Version);
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

int main(int argc, char **argv) {
  Fl::visual(FL_DOUBLE|FL_RGB);
Fl_Window  * window;
  img=0;
  window = make_window( );
  window->show( argc, argv );
  p= new Processor();
  return Fl::run();
}

Processor::Processor() {
  m.iterations=1;
  m.cols=3;
  m.rows=3;
  m.anchor_x=2;
  m.anchor_y=2;
  m.shape=CV_SHAPE_RECT;

  ed.aperture=0;
  ed.xOrder=1;
  ed.yOrder=0;
  ed.tmin=50;
  ed.tmax=150;

  th.thresh=128;
  th.maxVal=255;
  th.type=CV_THRESH_BINARY;
  th.method=CV_ADAPTIVE_THRESH_MEAN_C;
  th.block_size=3;
  th.param1=5;
  th.otsu=0;
  r.ratio=100;  
  r.rwidth=0;
  r.rheight=0;  
  r.aspect=1;
  
  sm.type=1;
  sm.size1=3;
  sm.size2=0;
  sm.sigma1=0.0;
  sm.sigma2=0.0;
  
  uimg=NULL;
  upimg=NULL;
  undo=false;
  
  flt.col=3;
  flt.row=3;
  flt.anchorx=-1;
  flt.anchory=-1;
  for(int i=0;i<81;i++)flt.data[i]=0.0;
  
  Clear();
}

void Processor::FixFilename(char *src, char *dst) {
  int j=0;
  for(int i=0; i<1024 ;i++){
    dst[j]=src[i];
    j++;
    if(src[i]==0) break;
    if(src[i]=='/') dst[j++]='/';
   
  }
}

void Processor::CopyTo1() {
  if(pimg){
    img=cvCloneImage(pimg);
    orj->SetImage(img);
    Before->redraw();
  
    Output->add("");
    Output->add("/* Copy Image2 to Image1 */");
    Output->add("  if(img)"); 
    Output->add("    cvReleaseImage(&img);");
    Output->add("  img=cvCloneImage(pimg);"); 
    Output->bottomline(Output->size());
  }
}

void Processor::CopyFromMemory(int i) {
  if(i==1){ 
    if(mimg){
      img=cvCloneImage(mimg);
      orj->SetImage(img);
      Before->redraw();
  
      Output->add("");
      Output->add("/* Copy from Memory to Image1 */");
      Output->add("  if(img)"); 
      Output->add("    cvReleaseImage(&img);");
      Output->add("  img=cvCloneImage(mimg);"); 
      Output->bottomline(Output->size());
    }
  }  
  else{ 
    if(mimg){
      pimg=cvCloneImage(mimg);
      proc->SetImage(pimg);
      After->redraw();
  
      Output->add("");
      Output->add("/* Copy from Memory to Image2 */");
      Output->add("  if(pimg)"); 
      Output->add("    cvReleaseImage(&pimg);");
      Output->add("  pimg=cvCloneImage(mimg);"); 
      Output->bottomline(Output->size());
    }
  }
}

void Processor::CopyToMemory(int i) {
  if(i==1){ 
    if(img){
      mimg=cvCloneImage(img);   
      Output->add("");
      Output->add("/* Copy Image1 to Memory */");
      Output->add("  if(mimg)"); 
      Output->add("    cvReleaseImage(&mimg);");
      Output->add("  mimg=cvCloneImage(img);"); 
      Output->bottomline(Output->size());
    }
  }
  else{
    if(pimg){
      mimg=cvCloneImage(pimg);   
      Output->add("");
      Output->add("/* Copy Image2 to Memory */");
      Output->add("  if(mimg)"); 
      Output->add("    cvReleaseImage(&mimg);");
      Output->add("  mimg=cvCloneImage(pimg);"); 
      Output->bottomline(Output->size());
    }
  }
}

void Processor::CopyFromCapture(IplImage *cimg, char*file) {
  SaveState();
  img=cimg;
  orj->SetImage(img);
  Before->redraw();

  Output->add("");
  char Buf[1024];
  char Buf2[1024];  
  if(file==NULL){
    Output->add("/* Capture from Camera */");
    Output->add("  if(img)"); 
    Output->add("    cvReleaseImage(&img);");
    sprintf(Buf,"  img=cvSnapshotFromCamera();");
    Output->add(Buf);
  }
  else{
    Output->add("/* Capture from Video File */");  
    Output->add("  if(img)"); 
    Output->add("    cvReleaseImage(&img);");
    sprintf(Buf,"  img=cvSnapshotFromVideo( %c%s %c);",'"',file,'"');
    FixFilename(Buf,Buf2);
    Output->add(Buf2);

  } 

  Output->bottomline(Output->size());
}

void Processor::SaveState() {
  usize=Output->size();
  if(uimg)
    cvReleaseImage(&uimg);
  if(upimg)
    cvReleaseImage(&upimg);  
  
  if(img)
    uimg=cvCloneImage(img);
  if(pimg) 
    upimg=cvCloneImage(pimg);
  undo=true;
}

void Processor::Undo(bool full) {
  if(undo==false) return;
 if(full){
    img=uimg;
    orj->SetImage(img);
    Before->redraw();
    uimg=NULL;
 }

 pimg=upimg;
 proc->SetImage(pimg);
 After->redraw();
 upimg=NULL;


//  if(usize){  
    while(usize < Output->size())
       Output->remove(Output->size());
    usize=0;
//  }
  undo=false;
  
  Output->bottomline(Output->size());
}

void Processor::Load1() {
  char* file;

  file = fl_file_chooser("Open", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
  if(file==NULL) return;

  SaveState();
  orj->Load(file, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR ); 
  img=orj->image;
// Board->redraw();
  Before->redraw();


  char Buf[1024];
  char Buf2[1024];
  Output->add("");
  Output->add("/* Loads Images */");
  Output->add("  if(img)"); 
  Output->add("    cvReleaseImage(&img);");
  sprintf(Buf,"  img=cvLoadImage( %c%s %c, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR  );",'"',file,'"');
  FixFilename(Buf,Buf2);
  Output->add(Buf2);
  Output->bottomline(Output->size());
}

void Processor::Save1() {
  if(!img) return;
  char* file=NULL;
  file = fl_file_chooser("Save", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
  if(file==NULL) return;
  orj->Save(file);

  char Buf[1024];
  char Buf2[1024];  
  Output->add("");
  Output->add("/* Save Image */");
  sprintf(Buf,"  cvSaveImage( %c%s %c,img );",'"',file,'"');
  FixFilename(Buf,Buf2);
  Output->add(Buf2);
  Output->bottomline(Output->size());
}

void Processor::Load2() {
  char* file;

  file = fl_file_chooser("Open", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
  if(file==NULL) return;
  SaveState();
  proc->Load(file, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR ); 
  pimg=proc->image;
  After->redraw();

  
  char Buf[1024];
  char Buf2[1024];
  Output->add("");
  Output->add("/* Loads Images */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  sprintf(Buf,"  pimg=cvLoadImage( %c%s %c, CV_LOAD_IMAGE_ANYDEPTH | CV_LOAD_IMAGE_ANYCOLOR  );",'"',file,'"');
  FixFilename(Buf,Buf2);
  Output->add(Buf2);
  Output->bottomline(Output->size());
}

void Processor::Save2() {
  if(!pimg) return;
  char* file=NULL;
  file = fl_file_chooser("Save", "Picture (*.{jpg,png,bmp,dib,sr,ras,pbm,pgm,ppm,tif,tiff})\t", 0);
  if(file==NULL) return;
  proc->Save(file);

  char Buf[1024];  
  char Buf2[1024];
  Output->add("");
  Output->add("/* Save Image */");
  sprintf(Buf,"  cvSaveImage( %c%s %c,pimg );",'"',file,'"');
  FixFilename(Buf,Buf2);
  Output->add(Buf2);
  Output->bottomline(Output->size());
}

void Processor::Capture() {
  CaptureForm *cp=new CaptureForm();
cp->show();

if(cp->isSnapshot){
  img=cp->getSnapshot();
  Before->redraw();
}
}

void Processor::Clear() {
  orj->SetImage(NULL);
  proc->SetImage(NULL);
  Before->redraw();
  After->redraw();
  Output->clear();
  Output->clear();
  char Buf[512];
  sprintf(Buf,"/* This Code generated by %s */",Version);
  Output->add(Buf);
  Output->add("#include <cv.h>");
  Output->add("#include <highgui.h>");
  Output->add("#include <stdio.h>");  
  Output->add("");
  Output->add("IplImage* img,*pimg,*timg,*mimg;");
  Output->add("void Process();");
  Output->add("");
  Output->add("int main( )");
  Output->add("{");
  sprintf(Buf,"   puts(%cThis Code generated by %s%c);",'"',Version,'"');
  Output->add(Buf);
  Output->add("   Process();");
  Output->add("   if(img){");
  sprintf(Buf,"     cvNamedWindow( %cSource%c, 1 );",'"','"');
  Output->add(Buf);
  sprintf(Buf,"     cvShowImage( %cSource%c, img );",'"','"');
  Output->add(Buf);
  Output->add("   }");
  Output->add("   if(pimg){");
  sprintf(Buf,"     cvNamedWindow( %cProcessed Image%c, 1 );",'"','"');
  Output->add(Buf);
  sprintf(Buf,"     cvShowImage( %cProcessed Image%c, pimg );",'"','"');
  Output->add(Buf);
  Output->add("   }");
  Output->add("   cvWaitKey(0);");
  Output->add("");
  Output->add("   if(img)");
  Output->add("     cvReleaseImage(&img);");
  Output->add("   if(pimg)");
  Output->add("     cvReleaseImage(&pimg);");
  Output->add("");
  Output->add("}");
  Output->add("void Process()");
  Output->add("{");
  Output->bottomline(Output->size());
  img=NULL;
  pimg=NULL;
}

void Processor::SaveCode() {
  if(Output->size()<1) return;
  char* file=NULL;
  file = fl_file_chooser("Save Code ", "Code (*.{c,cpp,cxx,}\t", 0);
  if(file==NULL) return;

  if(file!=NULL){
    char Buf[1024];
    FILE *fp;
    fp=fopen(file,"wt");
    if(fp){
     for(int i=1;i<=Output->size();i++){
       sprintf(Buf,"%s\n",Output->text(i));
       fputs(Buf,fp);
     }
     fputs("}",fp);
     fclose(fp);   
     fl_message("Code Saved");      
    }

  }
}

void Processor::Exit() {
  exit(0);
}

void Processor::ReSize() {
  if(img==NULL)   return;  




  SaveState();
  pimg = cvCreateImage( cvSize(r.rwidth,r.rheight), img->depth, img->nChannels);

  cvResize( img, pimg, r.method);
  proc->SetImage(pimg);
  After->redraw();
  

  char *Methods[]= {"CV_INTER_NN",
 	            "CV_INTER_LINEAR",
		    "CV_INTER_AREA",
		    "CV_INTER_CUBIC"};
  char Buf[512];  
  
  Output->add(""); 
  Output->add("/* Resizing image  */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  sprintf(Buf,"  pimg = cvCreateImage( cvSize(%d,%d), %d, %d);",r.rwidth,r.rheight, img->depth, img->nChannels);
  Output->add(Buf);
  sprintf(Buf,"  cvResize( img, pimg, %s);",Methods[r.method]);
  Output->add(Buf);  
  Output->bottomline(Output->size());
}

void Processor::Rotate(int angle) {
  if(img==NULL)   return;  





  SaveState();
  pimg = cvCloneImage (img);

  float m[6];
  CvMat M;
  m[0] = (float) (cos (angle * CV_PI / 180.));
  m[1] = (float) (-sin (angle * CV_PI / 180.));
  m[2] = img->width * 0.5;
  m[3] = -m[1];
  m[4] = m[0];
  m[5] = img->height * 0.5;
  cvInitMatHeader (&M, 2, 3, CV_32FC1, m, CV_AUTOSTEP);
  cvGetQuadrangleSubPix (img, pimg, &M);
  proc->SetImage(pimg);
  After->redraw();
  

  char Buf[512];  
  
  Output->add(""); 
  Output->add("/* Rotating image  */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  sprintf(Buf,"  int angle= %d ;",angle);
  Output->add("    pimg = cvCloneImage (img);");  
  Output->add(Buf);
  Output->add("  float m[6];");
  Output->add("  CvMat M;");  
  Output->add("  m[0] = (float) (cos (angle * CV_PI / 180.));");
  Output->add("  m[1] = (float) (-sin (angle * CV_PI / 180.));");
  Output->add("  m[2] = img->width * 0.5;");
  Output->add("  m[3] = -m[1];");
  Output->add("  m[4] = m[0];");
  Output->add("  m[5] = img->height * 0.5;");
  Output->add("  cvInitMatHeader (&M, 2, 3, CV_32FC1, m, CV_AUTOSTEP);");  
  Output->add("  cvGetQuadrangleSubPix( img, pimg, &M); ");

  Output->bottomline(Output->size());
}

void Processor::RGBToGray() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  cvCvtColor( img, pimg, CV_RGB2GRAY );
  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Converts image from color space ( RGB ) to a Gray Scale */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  cvCvtColor( img, pimg, CV_RGB2GRAY );");
  Output->bottomline(Output->size());
}

void Processor::SRed() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  cvSplit( img,pimg,0,0,0);
  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Split Red Channel of image to a Gray Scale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  cvSplit( img,0,0,pimg,0);");
  Output->bottomline(Output->size());
}

void Processor::SGreen() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  cvSplit( img,0,pimg,0,0);
  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Split Green Channel of image to a Gray Scale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  cvSplit( img,0,pimg,0,0);");
  Output->bottomline(Output->size());
}

void Processor::SBlue() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  cvSplit( img,0,0,pimg,0);
  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Split Blue Channel of image to a Gray Scale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  cvSplit( img,pimg,0,0,0);");
  Output->bottomline(Output->size());
}

void Processor::SHue() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  timg = cvCreateImage( cvGetSize(img), 8, 3 );
  cvCvtColor( img, timg, CV_RGB2HSV );
  cvConvertScale(timg,timg, 255/180 ,0);
  cvSplit( timg,pimg,0,0,0);
  cvReleaseImage(&timg);
  proc->SetImage(pimg);
  After->redraw();

  Output->add(""); 
  Output->add("/* Split Hue Channel from HSV image to a Gray Scale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  timg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 3 );");
  Output->add("  cvCvtColor( img, timg, CV_BGR2HSV );");
  Output->add("  cvConvertScale(timg,timg, 255.0/180.0 ,0);");
  Output->add("  cvSplit( timg,pimg,0,0,0);");
  Output->add("  cvReleaseImage(&timg);");
  Output->bottomline(Output->size());
}

void Processor::SSaturation() {
  if(img==NULL)   return;  
  if(img->nChannels!=3){ 
     fl_alert("image must be color");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  timg = cvCreateImage( cvGetSize(img), 8, 3 );
  cvCvtColor( img, timg, CV_RGB2HSV );
  cvSplit( timg,0,pimg,0,0);
  cvReleaseImage(&timg);

  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Split Saturation Channel from HSV to a Gray Scale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  timg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 3 );");
  Output->add("  cvCvtColor( img, timg, CV_BGR2HSV );");
  Output->add("  cvSplit( timg,0,pimg,0,0);");
  Output->add("  cvReleaseImage(&timg);");
  Output->bottomline(Output->size());
}

void Processor::EHist() {
  if(img==NULL)   return;  
  if(img->nChannels!=1){ 
     fl_alert("image must be a gray and single channel ");
     return;  
  }

  SaveState();  
  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );
  cvEqualizeHist(img,pimg );
  proc->SetImage(pimg);
  After->redraw();
  Output->add(""); 
  Output->add("/* Equalizes histogram of grayscale image */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 1 );");
  Output->add("  cvEqualizeHist(img,pimg);");
  Output->bottomline(Output->size());
}

void Processor::NormalThreshold() {
  if(img==NULL)   return;  
  SaveState();  
  pimg= cvCloneImage (img);  
  int typ;
  if(th.otsu)
    typ=th.type|CV_THRESH_OTSU;
  else
    typ=th.type;
  cvThreshold (img, pimg, th.thresh,th.maxVal,typ);



  proc->SetImage(pimg);
  After->redraw();

  char Buf[512];
  char *Types[]={"CV_THRESH_BINARY",
                 "CV_THRESH_BINARY_INV",
                 "CV_THRESH_TRUNC",
                 "CV_THRESH_TOZERO",
                 "CV_THRESH_TOZERO_INV"};

  Output->add("");
  Output->add("/* Normal Threshold of image */");
  Output->add("  if(pimg)");
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg= cvCloneImage (img); ");
  char otsuOn[]= " | CV_THRESH_OTSU";
  char otsuOff[]= " ";
  char *p=th.otsu ? otsuOn : otsuOff;
  sprintf(Buf,"cvThreshold (img, pimg, %.f, %.f, %s%s);", th.thresh,th.maxVal,Types[th.type],p);
  Output->add(Buf);
  Output->bottomline(Output->size());
}

void Processor::AdaptiveThreshold() {
  if(img==NULL)   return;  


  if(img->nChannels==3){
    if(fl_choice("Source image must me single channel gray \n Do you want to convert it ?","No","Yes",NULL)==0)
      return; 
    RGBToGray();
    CopyTo1();
  }

  SaveState();  
  pimg= cvCloneImage (img);  
  int typ=th.type;
  if(typ>=1)
    typ=CV_THRESH_BINARY;
  cvAdaptiveThreshold( img, pimg,th.maxVal,th.method,typ,th.block_size,th.param1);


  proc->SetImage(pimg);
  After->redraw();

  char Buf[512];
  char *Types[]={"CV_THRESH_BINARY",
                 "CV_THRESH_BINARY_INV"};
  char *Methods[]={"CV_THRESH_BINARY",
                   "CV_THRESH_BINARY_INV"};                

  Output->add("");
  Output->add("/* Adaptive Threshold of image */");
  Output->add("  if(pimg)");
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg= cvCloneImage (img); ");
  sprintf(Buf,"cvAdaptiveThreshold(img, pimg, %.f, %s , %s ,%d , %.f );",th.maxVal,Types[typ],Methods[th.method],th.block_size,th.param1);
  Output->add(Buf);
  Output->bottomline(Output->size());
}

void Processor::Erode() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvErode (img,pimg, element,m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  WriteCodeMorph(0);
}

void Processor::Dilate() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvDilate (img,pimg, element,m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  WriteCodeMorph(1);
}

void Processor::Open() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  timg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvMorphologyEx (img, pimg, timg,element,CV_MOP_OPEN, m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  cvReleaseImage (&timg);
  WriteCodeMorph(2);
}

void Processor::Close() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  timg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvMorphologyEx (img, pimg, timg,element,CV_MOP_CLOSE, m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  cvReleaseImage (&timg);
  WriteCodeMorph(3);
}

void Processor::Grad() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  timg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvMorphologyEx (img, pimg, timg,element,CV_MOP_GRADIENT, m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  cvReleaseImage (&timg);
  WriteCodeMorph(4);
}

void Processor::TopHat() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  timg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvMorphologyEx (img, pimg, timg,element,CV_MOP_TOPHAT, m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  cvReleaseImage (&timg);
  WriteCodeMorph(5);
}

void Processor::BlackHat() {
  if(img==NULL)   return;  

  SaveState();  
  IplConvKernel *element;
  pimg= cvCloneImage (img);  
  timg= cvCloneImage (img);  
  element = cvCreateStructuringElementEx (m.cols,m.rows,m.anchor_x,m.anchor_y,m.shape, NULL);
  cvMorphologyEx (img, pimg, timg,element,CV_MOP_BLACKHAT, m.iterations);
  proc->SetImage(pimg);
  After->redraw();
  cvReleaseStructuringElement(&element );
  cvReleaseImage (&timg);
  WriteCodeMorph(6);
}

void Processor::WriteCodeMorph(int i) {
  char Buf[512];
  char *Shapes[]={"CV_SHAPE_RECT",
                  "CV_SHAPE_CROSS",
                  "CV_SHAPE_ELLIPSE"};  
                
  char *Operations[]= {"Erode",
	               "Dilate",
		       "Open",
		       "Close",
		       "Gradiant",
		       "Top Hat",		     
		       "Black Hat"};                  
  char *OpCodes[]= {"CV_MOP_OPEN",
	            "CV_MOP_CLOSE",
		    "CV_MOP_GRADIENT",
		    "CV_MOP_TOPHAT",
		    "CV_MOP_BLACKHAT"};                  		     


  Output->add("");
  sprintf(Buf,"/* Aplly %s Morphological Operation */" ,Operations[i]);

  Output->add(Buf);
  Output->add("{");
  Output->add("  IplConvKernel *element;"); 
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg= cvCloneImage (img); "); 
  sprintf(Buf,"  element = cvCreateStructuringElementEx (%d,%d,%d,%d,%s, NULL);",m.cols,m.rows,m.anchor_x,m.anchor_y,Shapes[m.shape]);
  Output->add(Buf);
  if(i>1){
    Output->add("  timg= cvCloneImage (img);"); 
    sprintf(Buf,"  cvMorphologyEx (img, pimg, timg,element,%s , %d);",OpCodes[i-2],m.iterations);
    Output->add(Buf);
    Output->add("  cvReleaseImage (&timg);");    
  }
  else if(i==0){
    sprintf(Buf,"  cvErode (img,pimg, element, %d);",m.iterations);
    Output->add(Buf);
  }else {
    sprintf(Buf,"  cvDilate (img,pimg, element, %d);",m.iterations);
    Output->add(Buf);
  }


  Output->add("  cvReleaseStructuringElement(&element );");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Sobel() {
  if(img==NULL)   return;  

  if(img->nChannels==3){
    if(fl_choice("Source image must me single channel gray \n Do you want to convert it ?","No","Yes",NULL)==0)
       return; 
    RGBToGray();
    CopyTo1();
  }

  SaveState();  
  timg = cvCreateImage (cvGetSize (img), IPL_DEPTH_16S, 1);  
  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);  
  cvSobel (img, timg, ed.xOrder,ed.yOrder,Apertures[ed.aperture]);
  cvConvertScaleAbs (timg, pimg);
  proc->SetImage(pimg);
  After->redraw();

  cvReleaseImage (&timg);
// WriteCode

  char Buf[512];
  Output->add("");

  Output->add("/* Aplly Sobel Edge-Detection Operation */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  timg = cvCreateImage (cvGetSize (img), IPL_DEPTH_16S, 1);");  
  Output->add("  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);");  
  sprintf(Buf,"  cvSobel (img, timg, %d, %d, %d);",ed.xOrder,ed.yOrder,Apertures[ed.aperture]);
  Output->add(Buf);
  Output->add("  cvConvertScaleAbs (timg, pimg);");
  Output->add("  cvReleaseImage (&timg);");
  Output->bottomline(Output->size());
}

void Processor::Laplace() {
  if(img==NULL)   return;  

  if(img->nChannels==3){
    if(fl_choice("Source image must me single channel gray \n Do you want to convert it ?","No","Yes",NULL)==0)
       return; 
    RGBToGray();
    CopyTo1();
  }

  SaveState();  
  timg = cvCreateImage (cvGetSize (img), IPL_DEPTH_16S, 1);  
  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);  
  // see http://derindelimavi.blogspot.com/2009/10/opencv-20-izlenimleri.html
  if(Apertures[ed.aperture]==-1)
    cvLaplace (img, timg,Apertures[1]);
  else
    cvLaplace (img, timg,Apertures[ed.aperture]);
  cvConvertScaleAbs (timg, pimg);
  proc->SetImage(pimg);
  After->redraw();

  cvReleaseImage (&timg);
// WriteCode

  char Buf[512];
  Output->add("");

  Output->add("/* Aplly Laplace Edge-Detection Operation */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  timg = cvCreateImage (cvGetSize (img), IPL_DEPTH_16S, 1);");  
  Output->add("  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);");  
  sprintf(Buf,"  cvLaplace (img, timg, %d);",Apertures[ed.aperture]);
  Output->add(Buf);
  Output->add("  cvConvertScaleAbs (timg, pimg);");
  Output->add("  cvReleaseImage (&timg);");
  Output->bottomline(Output->size());
}

void Processor::Canny() {
  if(img==NULL)   return;  

  if(img->nChannels==3){
    if(fl_choice("Source image must me single channel gray \n Do you want to convert it ?","No","Yes",NULL)==0)
      return; 
    RGBToGray();
    CopyTo1();
  }

  SaveState();  
  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);  
  // Dikkat min aperture size for canny 3
  cvCanny (img, pimg, ed.tmin,ed.tmax,Apertures[ed.aperture]<3 ? 3 : Apertures[ed.aperture]);  
  proc->SetImage(pimg);
  After->redraw();


  // WriteCode
  char Buf[512];
  Output->add("");

  Output->add("/* Aplly Canny Edge-Detection Operation */");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCreateImage (cvGetSize (img), IPL_DEPTH_8U, 1);");  
  sprintf(Buf,"  cvCanny (img, pimg, %d, %d, %d);",(int)ed.tmin,(int)ed.tmax,(Apertures[ed.aperture]<3 ? 3 : Apertures[ed.aperture]));
  Output->add(Buf);
  Output->bottomline(Output->size());
}

void Processor::Add() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;        
  }


  SaveState();  
  IplImage *mask=NULL;

  if(mimg && (mimg->width==pimg->width) &&(mimg->height==pimg->height))  
    if(mimg->nChannels==1){
      if(fl_choice("Do you want to use Memory Image as an Mask ?","No","Yes",NULL))
        mask=mimg;
    }

  timg= cvCloneImage (img);  

  cvAdd(img, pimg, timg, mask);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");

  Output->add("/* Aplly Adding Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  IplImage *mask=NULL;");
  if(mimg){
    Output->add("  if(mimg->nChannels==1)");
    Output->add("    mask=mimg;");
  }

  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvAdd(img, pimg, timg, mask);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");


  Output->bottomline(Output->size());
}

void Processor::Sub() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;        
  }

  SaveState();  
  IplImage *mask=NULL;
  if(mimg && (mimg->width==pimg->width) &&(mimg->height==pimg->height))  
    if(mimg->nChannels==1){
      if(fl_choice("Do you want to use Memory Image as an Mask ?","No","Yes",NULL))
        mask=mimg;
    }

  timg= cvCloneImage (img);  

  cvSub(img, pimg, timg, mask);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Subtraction Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  IplImage *mask=NULL;");
  if(mimg){
    Output->add("  if(mimg->nChannels==1)");
    Output->add("    mask=mimg;");
  }
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvSub(img, pimg, timg, mask);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Mul() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;       
  }

  SaveState();  
  timg= cvCloneImage (img);  
  cvMul(img, pimg, timg);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Multiplication Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvMul(img, pimg, timg, 1);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Div() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;       
  }


  SaveState();  
  timg= cvCloneImage (img);  
  cvDiv(img, pimg, timg);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Division Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvDiv(img, pimg, timg, 1);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Max() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  

  if(!(((pimg->nChannels==1)&&(img->nChannels==1)&&img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have a single channel, the same data type and the same size ");
     return;        
  }


  SaveState();  
  timg= cvCloneImage (img);  
  cvMax(img, pimg, timg);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Max Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvMax(img, pimg, timg);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Min() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!(((pimg->nChannels==1)&&(img->nChannels==1)&&img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have a single channel, the same data type and the same size ");
     return;       
  }


  SaveState();  
  timg= cvCloneImage (img);  
  cvMin(img, pimg, timg);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Min Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvMin(img, pimg, timg);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::AbsDiff() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;        
  }

  SaveState();  
  timg= cvCloneImage (img);  
  cvAbsDiff(img, pimg, timg);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Absolute Difference  Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvAbsDiff(img, pimg, timg);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Compare(int op) {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!(((pimg->nChannels==1)&&(img->nChannels==1)&&img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have a single channel, the same data type and the same size ");
     return;        
  }

  SaveState();  

  timg= cvCloneImage (img);  
  cvCmp(img,pimg,timg,op);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  char Buf[512];
  char *OpCodes[]= {"CV_CMP_EQ",
	            "CV_CMP_GT",
		    "CV_CMP_GE",
		    "CV_CMP_LT",
		    "CV_CMP_LE",		    
		    "CV_CMP_NE"}; 

  Output->add("");
  Output->add("/* Aplly Compare Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  sprintf(Buf,"  cvCmp(img, pimg, timg, %s );",OpCodes[op]);
  Output->add(Buf);
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::And() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;     
  }


  SaveState();  
  IplImage *mask=NULL;
  if(mimg && (mimg->width==pimg->width) &&(mimg->height==pimg->height))  
    if(mimg->nChannels==1){
      if(fl_choice("Do you want to use Memory Image as an Mask ?","No","Yes",NULL))
        mask=mimg;
    }

  timg= cvCloneImage (img);  
  cvAnd(img, pimg, timg, mask);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly And Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  IplImage *mask=NULL;");
  if(mimg){
    Output->add("  if(mimg->nChannels==1)");
    Output->add("    mask=mimg;");
  }
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvAnd(img, pimg, timg, mask);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Or() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;        
  }


  SaveState();  
  IplImage *mask=NULL;
  if(mimg && (mimg->width==pimg->width) &&(mimg->height==pimg->height))  
    if(mimg->nChannels==1){
      if(fl_choice("Do you want to use Memory Image as an Mask ?","No","Yes",NULL))
        mask=mimg;
    }

  timg= cvCloneImage (img);  
  cvOr(img, pimg, timg, mask);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Or Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  IplImage *mask=NULL;");
  if(mimg){
    Output->add("  if(mimg->nChannels==1)");
    Output->add("    mask=mimg;");
  }
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvOr(img, pimg, timg, mask);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Xor() {
  if(img==NULL)   return;  
  if(pimg==NULL)  return;  
  if(!((img->nChannels==pimg->nChannels)&& (img->width==pimg->width) &&(img->height==pimg->height)) ){
     fl_alert("All the arrays must have the same type,and the same size ");
     return;       
  }


  SaveState();  
  IplImage *mask=NULL;
  if(mimg && (mimg->width==pimg->width) &&(mimg->height==pimg->height))  
    if(mimg->nChannels==1){
      if(fl_choice("Do you want to use Memory Image as an Mask ?","No","Yes",NULL))
        mask=mimg;
    }

  timg= cvCloneImage (img);  
  cvXor(img, pimg, timg, mask);

  proc->SetImage(timg);
  pimg=timg;
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Xor Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  IplImage *mask=NULL;");
  if(mimg){
    Output->add("  if(mimg->nChannels==1)");
    Output->add("    mask=mimg;");
  }
  Output->add("  if(timg)"); 
  Output->add("    cvReleaseImage(&timg);");
  Output->add("  timg = cvCloneImage (img);");  
  Output->add("  cvXor(img, pimg, timg, mask);");
  Output->add("  cvReleaseImage (&pimg);");
  Output->add("  pimg=timg;");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Not() {
  if(img==NULL)   return;  
  

  SaveState();  
  pimg= cvCloneImage (img);  
  cvNot(img, pimg);

  proc->SetImage(pimg);
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Aplly Logical Not Operation */");
  Output->add("/* Alert! there is no size and channel check */");
  Output->add("{");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCloneImage (img);");  
  Output->add("  cvNot(img, pimg);");
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Smooth() {
  char *TypeNames[]={
"CV_BLUR",
"CV_GAUSSIAN",
"CV_MEDIAN",
"CV_BILATERAL"
};
char Buf[512];

if(img==NULL)   return;  

  if(!sm.size1%2 || sm.size1 < 1 ){
    fl_alert("Size I : should be odd (1, 3, 5, ...)");
    return; 
  }
 
  if(sm.size2 && (sm.size2 < 0 || !sm.size2%2)){
    fl_alert("Size II : should be odd or zero");
    return; 
  }


  SaveState();  
  pimg= cvCloneImage (img);  
  cvSmooth (img, pimg, sm.type+1, sm.size1, sm.size2,sm.sigma1,sm.sigma2);

  proc->SetImage(pimg);
  After->redraw();

// WriteCode

  Output->add("");
  Output->add("/* Smoothes the image */");
  Output->add("{");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCloneImage (img);");  
  sprintf(Buf,"  cvSmooth (img, pimg, %s , %d , %d ,%.3f , %.3f );",TypeNames[sm.type], sm.size1, sm.size2,sm.sigma1,sm.sigma2);
  Output->add(Buf);
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::Filter2D(int row,int col,int X,int Y,float *data) {
  CvMat kernel = cvMat (row,col, CV_32F, data);


  SaveState();  
  pimg = cvCloneImage (img);

  // WriteCode
  char Buf[512];
  Output->add("");
  Output->add("/* Filter 2D  */");
  Output->add("{");
  sprintf(Buf,"  float data[%d];",row*col);
  Output->add(Buf);
  for(int i=0;i<row*col;i++){
    sprintf(Buf,"  data[%d]=%f;",i,data[i]);
    Output->add(Buf);    
  }
  // WriteCode  

  cvNormalize (&kernel, &kernel, 1.0, 0, CV_L1);
  cvFilter2D (img, pimg, &kernel, cvPoint (X, Y));
  proc->SetImage(pimg);
  After->redraw();
  

  

  // WriteCode
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  Output->add("  pimg = cvCloneImage (img);");  
  
  sprintf(Buf,"  CvMat kernel = cvMat (%d, %d, CV_32F, data);",row,col);
  Output->add(Buf);  
  Output->add("  cvNormalize (&kernel, &kernel, 1.0, 0, CV_L1);");
  
  sprintf(Buf,"  cvFilter2D (img, pimg, &kernel, cvPoint (%d,%d));",X,Y);
  Output->add(Buf);
  Output->add("}");
  Output->bottomline(Output->size());

  free(data);
}

void Processor::RGBFilter(int mode,int Rmin,int Rmax,int Gmin,int Gmax,int Bmin,int Bmax ) {
  SaveState();
  pimg=cvFilterRGB(img,Rmin,Rmax, Gmin, Gmax,Bmin,  Bmax, mode);
  proc->SetImage(pimg);
  After->redraw();
  
  // WriteCode

  char Buf[512];

  Output->add("");
  Output->add("/* RGB Color Filter */");
  Output->add("{");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  sprintf(Buf,"    pimg=cvFilterRGB(img,%d,%d, %d, %d, %d, %d, %d);",Rmin,Rmax, Gmin, Gmax,Bmin,  Bmax, mode);
  Output->add(Buf);
  Output->add("}");
  Output->bottomline(Output->size());
}

void Processor::HSFilter(int mode,int Hmin,int Hmax,int Smin,int Smax) {
  SaveState();
  pimg=cvFilterHS(img, Hmin, Hmax, Smin,Smax,mode);
  proc->SetImage(pimg);
  After->redraw();
  
  // WriteCode

  char Buf[512];

  Output->add("");
  Output->add("/* Hue Saturation Color Filter */");
  Output->add("{");
  Output->add("  if(pimg)"); 
  Output->add("    cvReleaseImage(&pimg);");
  sprintf(Buf,"    pimg=cvFilterHS(img, %d, %d, %d, %d, %d);",Hmin, Hmax, Smin,Smax,mode);
  Output->add(Buf);
  Output->add("}");
  Output->bottomline(Output->size());
}

void cb_Ok(Fl_Return_Button*o, void*w) {
  ((Fl_Window *)(o->parent()))->hide();
}

AboutDlg::AboutDlg() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(441, 284, "About");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(300, 240, 130, 30, "Ok");
      Ok->box(FL_GTK_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok);
    } // Fl_Return_Button* Ok
    { Info = new Fl_Browser(15, 14, 415, 212);
      Info->box(FL_EMBOSSED_FRAME);
      Info->color((Fl_Color)31);
      Info->textcolor((Fl_Color)4);
    } // Fl_Browser* Info
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void AboutDlg::show() {
  Info->add("@l@c@C1cvPreProcessor");
  Info->add("  cvPreProcessor is a GUI tool for OpenCv ");
  Info->add("  Version : 0.90 ");

  Info->add(" ");
  Info->add("* Programmed by BlueKid");
  Info->add("  http://derindelimavi.blogspot.com/");
  Info->add(" ");
  Info->add("* Please Send me any suggestion, modification or bugs.");
  Info->add(" Don't hesitate to contact me for any question");
  Info->add(" I will be very grateful with your feedbacks.");
  Info->add(" bluekid70@gmail.com");

  window->show();
}

void AboutDlg::hide() {
  window->hide();
}

void MorphOptions::cb_Ok_i(Fl_Return_Button*, void*) {
  p->m.iterations=iterations->value();
p->m.cols=cols->value();
p->m.rows=rows->value();
p->m.anchor_x=ax->value();
p->m.anchor_y=ay->value();
p->m.shape=Shape->value();
hide();
}
void MorphOptions::cb_Ok(Fl_Return_Button* o, void* v) {
  ((MorphOptions*)(o->parent()->user_data()))->cb_Ok_i(o,v);
}

MorphOptions::MorphOptions() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(271, 336, "Morphological Operations");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(131, 296, 130, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok);
    } // Fl_Return_Button* Ok
    { iterations = new Fl_Spinner(150, 16, 40, 24, "Number of iterations:");
      iterations->maximum(10);
    } // Fl_Spinner* iterations
    { Fl_Group* o = new Fl_Group(10, 63, 245, 209, "Structuring Element");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      { Shape = new Fl_Choice(80, 80, 155, 24, "Shape :");
        Shape->box(FL_NO_BOX);
        Shape->down_box(FL_BORDER_BOX);
        Shape->add("Rectangular ");
        Shape->add("Cross-Shaped ");
        Shape->add("Elliptic");
      } // Fl_Choice* Shape
      { cols = new Fl_Spinner(195, 114, 40, 24, "Number of columns :");
        cols->maximum(99);
      } // Fl_Spinner* cols
      { rows = new Fl_Spinner(195, 154, 40, 24, "Number of rows :");
        rows->maximum(99);
      } // Fl_Spinner* rows
      { ax = new Fl_Spinner(195, 188, 40, 24, "Anchor X :");
        ax->maximum(49);
      } // Fl_Spinner* ax
      { ay = new Fl_Spinner(195, 222, 40, 24, "Anchor Y :");
        ay->maximum(49);
      } // Fl_Spinner* ay
      o->end();
    } // Fl_Group* o
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void MorphOptions::show() {
  iterations->value(p->m.iterations);
  cols->value(p->m.cols);
  rows->value(p->m.rows);
  ax->value(p->m.anchor_x);
  ay->value(p->m.anchor_y);
  Shape->value(p->m.shape);
  window->show();
}

void MorphOptions::hide() {
  window->hide();
}

void EdgeOptions::cb_Ok1_i(Fl_Return_Button*, void*) {
  p->ed.xOrder=xOrder->value();
p->ed.yOrder=yOrder->value();
p->ed.tmin=tmin->value();
p->ed.tmax=tmax->value();
p->ed.aperture=Aperture->value();

hide();
}
void EdgeOptions::cb_Ok1(Fl_Return_Button* o, void* v) {
  ((EdgeOptions*)(o->parent()->user_data()))->cb_Ok1_i(o,v);
}

void EdgeOptions::cb_tmin_i(Fl_Value_Slider*, void*) {
  tmax->minimum(tmin->value()+1);
tmax->redraw();
}
void EdgeOptions::cb_tmin(Fl_Value_Slider* o, void* v) {
  ((EdgeOptions*)(o->parent()->parent()->user_data()))->cb_tmin_i(o,v);
}

void EdgeOptions::cb_tmax_i(Fl_Value_Slider*, void*) {
  tmin->maximum(tmax->value()-1);
tmin->redraw();
}
void EdgeOptions::cb_tmax(Fl_Value_Slider* o, void* v) {
  ((EdgeOptions*)(o->parent()->parent()->user_data()))->cb_tmax_i(o,v);
}

EdgeOptions::EdgeOptions() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(271, 336, "Edge Detection ");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(131, 296, 130, 30, "Ok");
      Ok->box(FL_GTK_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok1);
    } // Fl_Return_Button* Ok
    { Aperture = new Fl_Choice(111, 16, 155, 24, "Aperture  Size :");
      Aperture->down_box(FL_BORDER_BOX);
      Aperture->add("CV_SCHARR");
      Aperture->add("1x3 or 3x1");
      Aperture->add("3x3");Aperture->add("5x5");
      Aperture->add("7x7");Aperture->value(1);
    } // Fl_Choice* Aperture
    { Fl_Group* o = new Fl_Group(15, 66, 246, 60, "Sobel");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(2);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP_LEFT);
      { xOrder = new Fl_Round_Button(29, 75, 81, 15, "X Order");
        xOrder->type(102);
        xOrder->down_box(FL_ROUND_DOWN_BOX);
        xOrder->value(1);
        xOrder->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Round_Button* xOrder
      { yOrder = new Fl_Round_Button(31, 100, 79, 16, "YOrder");
        yOrder->type(102);
        yOrder->down_box(FL_ROUND_DOWN_BOX);
        yOrder->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Round_Button* yOrder
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 146, 246, 129, "Canny");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(2);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP_LEFT);
      { tmin = new Fl_Value_Slider(25, 175, 226, 20, "Threshold Min");
        tmin->type(5);
        tmin->box(FL_PLASTIC_DOWN_BOX);
        tmin->color((Fl_Color)12);
        tmin->selection_color((Fl_Color)1);
        tmin->maximum(255);
        tmin->step(1);
        tmin->textsize(14);
        tmin->callback((Fl_Callback*)cb_tmin);
        tmin->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* tmin
      { tmax = new Fl_Value_Slider(25, 230, 226, 20, "Threshold Max");
        tmax->type(5);
        tmax->box(FL_PLASTIC_DOWN_BOX);
        tmax->color((Fl_Color)12);
        tmax->selection_color((Fl_Color)1);
        tmax->maximum(255);
        tmax->step(1);
        tmax->value(255);
        tmax->textsize(14);
        tmax->callback((Fl_Callback*)cb_tmax);
        tmax->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* tmax
      o->end();
    } // Fl_Group* o
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void EdgeOptions::show() {
  xOrder->value(p->ed.xOrder);
  yOrder->value(p->ed.yOrder);
  tmin->value(p->ed.tmin);
  tmax->value(p->ed.tmax);
  Aperture->value(p->ed.aperture);

  window->show();
}

void EdgeOptions::hide() {
  window->hide();
}

void ThresholdOptions::cb_Ok2_i(Fl_Return_Button*, void*) {
  Update();
hide();
}
void ThresholdOptions::cb_Ok2(Fl_Return_Button* o, void* v) {
  ((ThresholdOptions*)(o->parent()->user_data()))->cb_Ok2_i(o,v);
}

void ThresholdOptions::cb_Otsu_i(Fl_Check_Button*, void*) {
  if(Otsu->value()) 
  thresh->deactivate();
else
  thresh->activate();
}
void ThresholdOptions::cb_Otsu(Fl_Check_Button* o, void* v) {
  ((ThresholdOptions*)(o->parent()->parent()->user_data()))->cb_Otsu_i(o,v);
}

void ThresholdOptions::cb_Apply_i(Fl_Button*, void*) {
  Update();
p->NormalThreshold();
}
void ThresholdOptions::cb_Apply(Fl_Button* o, void* v) {
  ((ThresholdOptions*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

void ThresholdOptions::cb_Apply1_i(Fl_Button*, void*) {
  Update();
p->AdaptiveThreshold();
}
void ThresholdOptions::cb_Apply1(Fl_Button* o, void* v) {
  ((ThresholdOptions*)(o->parent()->user_data()))->cb_Apply1_i(o,v);
}

ThresholdOptions::ThresholdOptions() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(416, 448, "Threshold Options");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(306, 405, 99, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok2);
    } // Fl_Return_Button* Ok
    { Fl_Group* o = new Fl_Group(15, 116, 390, 112, "Normal ");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(2);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP_LEFT);
      { thresh = new Fl_Value_Slider(25, 145, 370, 20, "Threshold Value");
        thresh->type(5);
        thresh->box(FL_PLASTIC_DOWN_BOX);
        thresh->color((Fl_Color)12);
        thresh->selection_color((Fl_Color)1);
        thresh->maximum(255);
        thresh->step(1);
        thresh->value(128);
        thresh->textsize(14);
        thresh->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* thresh
      { Otsu = new Fl_Check_Button(30, 190, 64, 20, "use Otsu method");
        Otsu->down_box(FL_DOWN_BOX);
        Otsu->callback((Fl_Callback*)cb_Otsu);
      } // Fl_Check_Button* Otsu
      o->end();
    } // Fl_Group* o
    { max = new Fl_Value_Slider(20, 30, 380, 20, "Max Value");
      max->type(5);
      max->box(FL_PLASTIC_DOWN_BOX);
      max->color((Fl_Color)12);
      max->selection_color((Fl_Color)1);
      max->maximum(255);
      max->step(1);
      max->value(255);
      max->textsize(14);
      max->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* max
    { Type = new Fl_Choice(130, 66, 245, 24, "Threshold Type :");
      Type->down_box(FL_BORDER_BOX);
      Type->add("CV_THRESH_BINARY");
      Type->add("CV_THRESH_BINARY_INV");
      Type->add("CV_THRESH_TRUNC");Type->add("CV_THRESH_TOZERO");
      Type->add("CV_THRESH_TOZERO_INV");Type->value(0);
    } // Fl_Choice* Type
    { Fl_Group* o = new Fl_Group(20, 254, 385, 133, "Adaptive Threshold");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(2);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP_LEFT);
      { Method = new Fl_Choice(89, 260, 306, 21, "Method :");
        Method->down_box(FL_BORDER_BOX);
        Method->add("CV_ADAPTIVE_THRESH_MEAN_C");
        Method->add("CV_ADAPTIVE_THRESH_GAUSSIAN_C");
        Method->value(0);
      } // Fl_Choice* Method
      { BlockSize = new Fl_Spinner(110, 339, 40, 24, "Block Size :");
        BlockSize->minimum(3);
        BlockSize->maximum(33);
        BlockSize->step(2);
        BlockSize->value(3);
      } // Fl_Spinner* BlockSize
      { Param1 = new Fl_Value_Input(155, 296, 40, 24, "Method-parameter:");
        Param1->minimum(-50);
        Param1->maximum(50);
        Param1->value(5);
      } // Fl_Value_Input* Param1
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(20, 405, 105, 30, "Apply Normal ");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(135, 405, 105, 30, "Apply Adaptive");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply1);
    } // Fl_Button* o
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void ThresholdOptions::show() {
  thresh->value(p->th.thresh);
  max->value(p->th.maxVal);
  Type->value(p->th.type);
  Method->value(p->th.method);
  BlockSize->value(p->th.block_size);
  Param1->value(p->th.param1);
  Otsu->value(p->th.otsu);
  if(Otsu->value()) 
    thresh->deactivate();
  else
    thresh->activate();


  window->show();
}

void ThresholdOptions::hide() {
  window->hide();
}

void ThresholdOptions::Update() {
  p->th.thresh=thresh->value();
  p->th.maxVal=max->value();
  p->th.type=Type->value();
  p->th.method=Method->value();
  p->th.block_size=BlockSize->value();
  p->th.param1=Param1->value();
  p->th.otsu=Otsu->value();
}

void ReSizeForm::cb_Ok3_i(Fl_Return_Button*, void*) {
  p->r.method=Interpolation->value();
  p->r.ratio=ratio->value();
  p->r.aspect=aspect->value();
  p->r.rwidth=rwidth->value();
  p->r.rheight=rheight->value();  
  p->ReSize();
  hide();
}
void ReSizeForm::cb_Ok3(Fl_Return_Button* o, void* v) {
  ((ReSizeForm*)(o->parent()->user_data()))->cb_Ok3_i(o,v);
}

void ReSizeForm::cb_aspect_i(Fl_Check_Button*, void*) {
  if(aspect->value())
  ratio->activate();
else
  ratio->deactivate();
}
void ReSizeForm::cb_aspect(Fl_Check_Button* o, void* v) {
  ((ReSizeForm*)(o->parent()->user_data()))->cb_aspect_i(o,v);
}

void ReSizeForm::cb_ratio_i(Fl_Value_Slider*, void*) {
  rwidth->value(int(oldw->value()*ratio->value()*0.01));
rheight->value(int(oldh->value()*ratio->value()*0.01));
}
void ReSizeForm::cb_ratio(Fl_Value_Slider* o, void* v) {
  ((ReSizeForm*)(o->parent()->user_data()))->cb_ratio_i(o,v);
}

ReSizeForm::ReSizeForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(359, 336, "ReSize Image");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(215, 296, 130, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok3);
    } // Fl_Return_Button* Ok
    { Interpolation = new Fl_Choice(115, 21, 195, 24, "Interpolation :");
      Interpolation->box(FL_NO_BOX);
      Interpolation->down_box(FL_BORDER_BOX);
      Interpolation->add("Nearest-Neigbor");
      Interpolation->add("Bilinear");
      Interpolation->add("Pixel Area");
      Interpolation->add("Bicubic");Interpolation->value(1);
    } // Fl_Choice* Interpolation
    { aspect = new Fl_Check_Button(30, 134, 210, 26, "Preserve Aspect Ratio");
      aspect->down_box(FL_DOWN_BOX);
      aspect->value(1);
      aspect->callback((Fl_Callback*)cb_aspect);
    } // Fl_Check_Button* aspect
    { oldw = new Fl_Value_Output(120, 66, 120, 24, "Image Width:");
      oldw->value(10);
    } // Fl_Value_Output* oldw
    { oldh = new Fl_Value_Output(120, 100, 120, 24, "Image Height:");
      oldh->value(20);
    } // Fl_Value_Output* oldh
    { ratio = new Fl_Value_Slider(89, 170, 251, 20, "Ratio % :");
      ratio->type(1);
      ratio->color((Fl_Color)23);
      ratio->minimum(10);
      ratio->maximum(500);
      ratio->step(10);
      ratio->value(100);
      ratio->textsize(14);
      ratio->callback((Fl_Callback*)cb_ratio);
      ratio->align(FL_ALIGN_LEFT);
    } // Fl_Value_Slider* ratio
    { rwidth = new Fl_Value_Input(120, 206, 147, 24, "New Width:");
    } // Fl_Value_Input* rwidth
    { rheight = new Fl_Value_Input(120, 246, 147, 24, "New Heigth:");
    } // Fl_Value_Input* rheight
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void ReSizeForm::show() {
  oldw->value(img->width);
  oldh->value(img->height);
  Interpolation->value(p->r.method);
  ratio->value(p->r.ratio);
  aspect->value(p->r.aspect);

  if(aspect->value()){
    ratio->activate();
    rwidth->value(int(oldw->value()*ratio->value()*0.01));
    rheight->value(int(oldh->value()*ratio->value()*0.01));  
  }
  else{
    ratio->deactivate();
    rwidth->value(img->width);
    rheight->value(img->height);  
  }
  
  window->show();
}

void ReSizeForm::hide() {
  window->hide();
}

void HistForm::cb_Ok4_i(Fl_Return_Button*, void*) {
  hide();
}
void HistForm::cb_Ok4(Fl_Return_Button* o, void* v) {
  ((HistForm*)(o->parent()->user_data()))->cb_Ok4_i(o,v);
}

void HistForm::cb_Type_i(Fl_Spinner*, void*) {
  Chart->type(Type->value());
Chart->redraw();
}
void HistForm::cb_Type(Fl_Spinner* o, void* v) {
  ((HistForm*)(o->parent()->user_data()))->cb_Type_i(o,v);
}

void HistForm::cb_Ch_i(Fl_Choice*, void*) {
  Draw();
}
void HistForm::cb_Ch(Fl_Choice* o, void* v) {
  ((HistForm*)(o->parent()->user_data()))->cb_Ch_i(o,v);
}

HistForm::HistForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(811, 535, "Color Histogram");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(671, 495, 130, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok4);
    } // Fl_Return_Button* Ok
    { Chart = new Fl_Chart(10, 44, 791, 362);
      Chart->box(FL_GTK_DOWN_BOX);
      Chart->color((Fl_Color)18);
      Chart->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      Chart->labeltype(FL_NORMAL_LABEL);
      Chart->labelfont(0);
      Chart->labelsize(14);
      Chart->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      Chart->align(FL_ALIGN_CENTER);
      Chart->when(FL_WHEN_RELEASE);
    } // Fl_Chart* Chart
    { Type = new Fl_Spinner(100, 10, 40, 24, "Chart Type  :");
      Type->minimum(0);
      Type->maximum(4);
      Type->value(3);
      Type->callback((Fl_Callback*)cb_Type);
    } // Fl_Spinner* Type
    { Ch = new Fl_Choice(260, 10, 190, 24, "Channel :");
      Ch->down_box(FL_BORDER_BOX);
      Ch->callback((Fl_Callback*)cb_Ch);
      Ch->add("Red"); Ch->add("Green");Ch->add("Blue");
      Ch->add("Hue");Ch->add("Saturation");
      Ch->value(0);
    } // Fl_Choice* Ch
    { Non_Zero = new Fl_Value_Output(121, 427, 114, 24, "Count Non-zero :");
    } // Fl_Value_Output* Non_Zero
    { Sum = new Fl_Value_Output(120, 461, 115, 24, "Sum :");
    } // Fl_Value_Output* Sum
    { Avg = new Fl_Value_Output(120, 495, 115, 24, "Avarage :");
    } // Fl_Value_Output* Avg
    { StdDev = new Fl_Value_Output(441, 427, 114, 24, "Standart Deviation:");
    } // Fl_Value_Output* StdDev
    { Min = new Fl_Value_Output(440, 461, 115, 24, "Min :");
    } // Fl_Value_Output* Min
    { Max = new Fl_Value_Output(440, 495, 115, 24, "Max :");
    } // Fl_Value_Output* Max
    { Width = new Fl_Value_Output(680, 427, 114, 24, "Image Width :");
    } // Fl_Value_Output* Width
    { Height = new Fl_Value_Output(680, 461, 114, 24, "Image Height :");
    } // Fl_Value_Output* Height
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void HistForm::show() {
  Chart->autosize(1);
Calculate();
Draw();
if(img->nChannels==1)
  Ch->hide();

window->show();
}

void HistForm::hide() {
  int k=1;
  if(img->nChannels==3) 
    k=5;
  for(int i=0;i< k;i++){
    cvReleaseImage (&himg[i]);  
    cvReleaseHist (&hist[i]);  
  }  
//  fl_alert("Images Released");
  window->hide();
}

void HistForm::Draw() {
  int np=256;
  int kRed[]  ={1,0,0,0,1,1};
  int kGreen[]={0,1,0,1,1,1};
  int kBlue[]={0,0,1,1,0,1};
  int j=Ch->value();
  int ci;

  if(img->nChannels==1)
    ci=5;
  else
    ci=j;

  Chart->clear();
  Chart->type(Type->value());
  if(j==3)
    np=181;
  
  char buf[4];
  for(int i=0;i<np;i++){
  
    if(i%10==0){
       sprintf(buf,"%d",i);
    }
    else
      buf[0]=0;
    Chart->add(cvGetReal1D (hist[j]->bins, i),buf,fl_rgb_color(kRed[ci]*i,kGreen[ci]*i,kBlue[ci]*i));
  }
  
  Non_Zero->value(non_zeros[j]);
  Sum->value(sums[j]);  
  Avg->value(avgs[j]);      
  StdDev->value(std_devs[j]);
  Min->value(mins[j]);  
  Max->value(maxs[j]);
}

void HistForm::Calculate() {
  float crange[] = { 0, 255 };  
  float *ranges[] = { crange };
  int hist_size = 256;
  int k=1;
  if(img->nChannels==3) 
    k=5;
  
  for(int i=0;i< k;i++)
    himg[i] = cvCreateImage (cvSize (img->width, img->height), img->depth, 1);


  if(img->nChannels==1){
    cvCopy (img, himg[0], NULL);  

  }
  else{
    cvSplit (img, himg[0], himg[1], himg[2], 0);  
    timg = cvCreateImage( cvGetSize(img), 8, 3 );
    cvCvtColor( img, timg, CV_RGB2HSV );
    cvSplit (timg, himg[3], 0, 0, 0);
    cvSplit (timg, 0, himg[4], 0, 0);
    cvReleaseImage (&timg);          
  }
  for(int i=0;i<k;i++){

     hist[i] = cvCreateHist (1, &hist_size, CV_HIST_ARRAY, ranges, 1);
     cvCalcHist (&himg[i], hist[i], 0, NULL);

     CvScalar avg, sd;
     non_zeros[i]=cvCountNonZero(himg[i]);
     cvAvgSdv(himg[i], &avg, &sd);
     avgs[i]=avg.val[0];
     std_devs[i]=sd.val[0];
     cvMinMaxLoc(himg[i],&mins[i],&maxs[i]);       
     
  }
  
Height->value(img->height);
Width->value(img->width);
}

void SmoothForm::cb_Ok5_i(Fl_Return_Button*, void*) {
  save();
  hide();
}
void SmoothForm::cb_Ok5(Fl_Return_Button* o, void* v) {
  ((SmoothForm*)(o->parent()->user_data()))->cb_Ok5_i(o,v);
}

void SmoothForm::cb_Apply2_i(Fl_Button*, void*) {
  save();
  p->Smooth();
}
void SmoothForm::cb_Apply2(Fl_Button* o, void* v) {
  ((SmoothForm*)(o->parent()->user_data()))->cb_Apply2_i(o,v);
}

SmoothForm::SmoothForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(312, 192, "Smoothes the image");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(190, 145, 115, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok5);
    } // Fl_Return_Button* Ok
    { Type = new Fl_Choice(115, 21, 185, 24, "Smooth Type :");
      Type->box(FL_NO_BOX);
      Type->down_box(FL_BORDER_BOX);
      Type->add("CV_BLUR");Type->add("CV_GAUSSIAN");
      Type->add("CV_MEDIAN");Type->add("CV_BILATERAL");
      Type->value(1);
    } // Fl_Choice* Type
    { size1 = new Fl_Value_Input(80, 62, 50, 23, "Size I     :");
      size1->value(3);
    } // Fl_Value_Input* size1
    { size2 = new Fl_Value_Input(80, 95, 50, 24, "Size II    :");
    } // Fl_Value_Input* size2
    { sigma1 = new Fl_Value_Input(250, 62, 50, 23, "Sigma I :");
    } // Fl_Value_Input* sigma1
    { sigma2 = new Fl_Value_Input(250, 95, 50, 24, "Sigma II :");
    } // Fl_Value_Input* sigma2
    { Fl_Button* o = new Fl_Button(20, 145, 120, 30, "Apply");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply2);
    } // Fl_Button* o
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void SmoothForm::show() {
  Type->value(p->sm.type);
size1->value(p->sm.size1);
size2->value(p->sm.size2);
sigma1->value(p->sm.sigma1);
sigma2->value(p->sm.sigma2);
window->show();
}

void SmoothForm::hide() {
  window->hide();
}

void SmoothForm::save() {
  p->sm.type=Type->value();
  p->sm.size1=size1->value();
  p->sm.size2=size2->value();
  p->sm.sigma1=sigma1->value();
  p->sm.sigma2=sigma2->value();
}

void RotateForm::cb_Ok6_i(Fl_Return_Button*, void*) {
  hide();
}
void RotateForm::cb_Ok6(Fl_Return_Button* o, void* v) {
  ((RotateForm*)(o->parent()->user_data()))->cb_Ok6_i(o,v);
}

void RotateForm::cb_Apply3_i(Fl_Button*, void*) {
  p->Rotate(Angle->value());
}
void RotateForm::cb_Apply3(Fl_Button* o, void* v) {
  ((RotateForm*)(o->parent()->user_data()))->cb_Apply3_i(o,v);
}

void RotateForm::cb_dl_i(Fl_Dial*, void*) {
  Angle->value(dl->value());
}
void RotateForm::cb_dl(Fl_Dial* o, void* v) {
  ((RotateForm*)(o->parent()->user_data()))->cb_dl_i(o,v);
}

RotateForm::RotateForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(400, 123, "Rotates the image");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(272, 80, 120, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok6);
    } // Fl_Return_Button* Ok
    { Fl_Button* o = new Fl_Button(272, 33, 120, 30, "Apply");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply3);
    } // Fl_Button* o
    { dl = new Fl_Dial(15, 16, 90, 87);
      dl->type(1);
      dl->box(FL_GTK_ROUND_UP_BOX);
      dl->color((Fl_Color)179);
      dl->minimum(-130);
      dl->maximum(130);
      dl->step(1);
      dl->callback((Fl_Callback*)cb_dl);
    } // Fl_Dial* dl
    { Angle = new Fl_Value_Output(130, 44, 99, 24, "Rotate Angle");
      Angle->align(FL_ALIGN_TOP);
    } // Fl_Value_Output* Angle
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void RotateForm::show() {
  window->show();
}

void RotateForm::hide() {
  window->hide();
}

void RGBFilterForm::cb_Ok7_i(Fl_Return_Button*, void*) {
  hide();
}
void RGBFilterForm::cb_Ok7(Fl_Return_Button* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Ok7_i(o,v);
}

void RGBFilterForm::cb_Apply4_i(Fl_Button*, void*) {
  if(FirstTime==false)
  p->Undo(false);
else
  FirstTime=false;  
p->RGBFilter(Mode->value(),Rmin->value(),Rmax->value(),Gmin->value(),Gmax->value(),Bmin->value(),Bmax->value());
}
void RGBFilterForm::cb_Apply4(Fl_Button* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Apply4_i(o,v);
}

void RGBFilterForm::cb_Rmin_i(Fl_Value_Slider*, void*) {
  Rmin->color(fl_rgb_color(Rmin->value(),0,0));
Rmax->minimum(Rmin->value());
changecolor();
}
void RGBFilterForm::cb_Rmin(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Rmin_i(o,v);
}

void RGBFilterForm::cb_Rmax_i(Fl_Value_Slider*, void*) {
  Rmax->color(fl_rgb_color(Rmax->value(),0,0));
Rmin->maximum(Rmax->value());
changecolor();
}
void RGBFilterForm::cb_Rmax(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Rmax_i(o,v);
}

void RGBFilterForm::cb_Gmin_i(Fl_Value_Slider*, void*) {
  Gmin->color(fl_rgb_color(0,Gmin->value(),0));
Gmax->minimum(Gmin->value());
changecolor();
}
void RGBFilterForm::cb_Gmin(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Gmin_i(o,v);
}

void RGBFilterForm::cb_Gmax_i(Fl_Value_Slider*, void*) {
  Gmax->color(fl_rgb_color(0,Gmax->value(),0));
Gmin->maximum(Gmax->value());
changecolor();
}
void RGBFilterForm::cb_Gmax(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Gmax_i(o,v);
}

void RGBFilterForm::cb_Bmin_i(Fl_Value_Slider*, void*) {
  Bmin->color(fl_rgb_color(0,0,Bmin->value()));
Bmax->minimum(Bmin->value());
changecolor();
}
void RGBFilterForm::cb_Bmin(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Bmin_i(o,v);
}

void RGBFilterForm::cb_Bmax_i(Fl_Value_Slider*, void*) {
  Bmax->color(fl_rgb_color(0,0,Bmax->value()));
Bmin->maximum(Bmax->value());
changecolor();
}
void RGBFilterForm::cb_Bmax(Fl_Value_Slider* o, void* v) {
  ((RGBFilterForm*)(o->parent()->user_data()))->cb_Bmax_i(o,v);
}

RGBFilterForm::RGBFilterForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(545, 269, "RGB Filter");
    window->box(FL_UP_BOX);
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(405, 215, 120, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok7);
    } // Fl_Return_Button* Ok
    { Fl_Button* o = new Fl_Button(250, 215, 120, 30, "Apply");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply4);
    } // Fl_Button* o
    { Chart = new Fl_Group(10, 14, 185, 181);
      Chart->box(FL_UP_FRAME);
      { C5 = new Fl_Box(21, 24, 40, 40);
        C5->box(FL_DOWN_BOX);
      } // Fl_Box* C5
      { Cm = new Fl_Box(63, 68, 74, 74);
        Cm->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* Cm
      { C7 = new Fl_Box(80, 25, 40, 40);
        C7->box(FL_DOWN_BOX);
      } // Fl_Box* C7
      { C8 = new Fl_Box(140, 25, 40, 40);
        C8->box(FL_DOWN_BOX);
      } // Fl_Box* C8
      { C3 = new Fl_Box(20, 85, 40, 40);
        C3->box(FL_DOWN_BOX);
      } // Fl_Box* C3
      { C1 = new Fl_Box(20, 145, 40, 40);
        C1->box(FL_DOWN_BOX);
      } // Fl_Box* C1
      { C2 = new Fl_Box(80, 145, 40, 40);
        C2->box(FL_DOWN_BOX);
      } // Fl_Box* C2
      { C6 = new Fl_Box(140, 85, 40, 40);
        C6->box(FL_DOWN_BOX);
      } // Fl_Box* C6
      { C4 = new Fl_Box(140, 145, 40, 40);
        C4->box(FL_DOWN_BOX);
      } // Fl_Box* C4
      Chart->end();
    } // Fl_Group* Chart
    { Rmin = new Fl_Value_Slider(220, 31, 30, 159, "Rmin");
      Rmin->type(4);
      Rmin->box(FL_GTK_DOWN_BOX);
      Rmin->color((Fl_Color)1);
      Rmin->labelfont(1);
      Rmin->labelcolor((Fl_Color)1);
      Rmin->maximum(254);
      Rmin->step(1);
      Rmin->textsize(14);
      Rmin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Rmin->callback((Fl_Callback*)cb_Rmin);
      Rmin->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Rmin
    { Rmax = new Fl_Value_Slider(260, 31, 30, 159, "Rmax");
      Rmax->type(4);
      Rmax->box(FL_GTK_DOWN_BOX);
      Rmax->color((Fl_Color)1);
      Rmax->labelfont(1);
      Rmax->labelcolor((Fl_Color)1);
      Rmax->minimum(1);
      Rmax->maximum(255);
      Rmax->step(1);
      Rmax->value(255);
      Rmax->textsize(14);
      Rmax->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Rmax->callback((Fl_Callback*)cb_Rmax);
      Rmax->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Rmax
    { Gmin = new Fl_Value_Slider(335, 31, 30, 159, "Gmin");
      Gmin->type(4);
      Gmin->box(FL_GTK_DOWN_BOX);
      Gmin->color((Fl_Color)2);
      Gmin->labelfont(1);
      Gmin->labelcolor((Fl_Color)2);
      Gmin->maximum(254);
      Gmin->step(1);
      Gmin->textsize(14);
      Gmin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Gmin->callback((Fl_Callback*)cb_Gmin);
      Gmin->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Gmin
    { Gmax = new Fl_Value_Slider(380, 31, 30, 159, "Gmax");
      Gmax->type(4);
      Gmax->box(FL_GTK_DOWN_BOX);
      Gmax->color((Fl_Color)2);
      Gmax->labelfont(1);
      Gmax->labelcolor((Fl_Color)2);
      Gmax->minimum(1);
      Gmax->maximum(255);
      Gmax->step(1);
      Gmax->value(255);
      Gmax->textsize(14);
      Gmax->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Gmax->callback((Fl_Callback*)cb_Gmax);
      Gmax->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Gmax
    { Bmin = new Fl_Value_Slider(450, 31, 30, 159, "Bmin");
      Bmin->type(4);
      Bmin->box(FL_GTK_DOWN_BOX);
      Bmin->color((Fl_Color)4);
      Bmin->labelfont(1);
      Bmin->labelcolor((Fl_Color)4);
      Bmin->maximum(254);
      Bmin->step(1);
      Bmin->textsize(14);
      Bmin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Bmin->callback((Fl_Callback*)cb_Bmin);
      Bmin->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Bmin
    { Bmax = new Fl_Value_Slider(495, 31, 30, 159, "Bmax");
      Bmax->type(4);
      Bmax->box(FL_GTK_DOWN_BOX);
      Bmax->color((Fl_Color)4);
      Bmax->labelfont(1);
      Bmax->labelcolor((Fl_Color)4);
      Bmax->minimum(1);
      Bmax->maximum(255);
      Bmax->step(1);
      Bmax->value(255);
      Bmax->textsize(14);
      Bmax->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Bmax->callback((Fl_Callback*)cb_Bmax);
      Bmax->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Value_Slider* Bmax
    { Mode = new Fl_Check_Button(25, 220, 110, 15, "Color Mask");
      Mode->down_box(FL_DOWN_BOX);
      Mode->value(1);
    } // Fl_Check_Button* Mode
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void RGBFilterForm::show() {
  changecolor();
Rmin->color(fl_rgb_color(Rmin->value(),0,0));
Gmin->color(fl_rgb_color(0,Gmin->value(),0));
Bmin->color(fl_rgb_color(0,0,Bmin->value()));
FirstTime=true;
window->show();
}

void RGBFilterForm::hide() {
  window->hide();
}

void RGBFilterForm::changecolor() {
  C1->color(fl_rgb_color(Rmin->value(),Gmin->value(), Bmin->value()));
C2->color(fl_rgb_color(Rmax->value(),Gmin->value(), Bmin->value()));
C3->color(fl_rgb_color(Rmin->value(),Gmax->value(), Bmin->value()));
C4->color(fl_rgb_color(Rmin->value(),Gmin->value(), Bmax->value()));

C5->color(fl_rgb_color(Rmax->value(),Gmax->value(), Bmin->value()));
C6->color(fl_rgb_color(Rmax->value(),Gmin->value(), Bmax->value()));
C7->color(fl_rgb_color(Rmin->value(),Gmax->value(), Bmax->value()));
C8->color(fl_rgb_color(Rmax->value(),Gmax->value(), Bmax->value()));
unsigned char rm, gm,bm;

rm=(Rmax->value()+Rmin->value())/2;
gm=(Gmax->value()+Gmin->value())/2;
bm=(Bmax->value()+Bmin->value())/2;

Cm->color(fl_rgb_color(rm,gm,bm));

Chart->redraw();
}

void HSFilterForm::cb_Ok8_i(Fl_Return_Button*, void*) {
  hide();
}
void HSFilterForm::cb_Ok8(Fl_Return_Button* o, void* v) {
  ((HSFilterForm*)(o->parent()->user_data()))->cb_Ok8_i(o,v);
}

void HSFilterForm::cb_Apply5_i(Fl_Button*, void*) {
  if(FirstTime==false)
  p->Undo(false);
else
  FirstTime=false;  
p->HSFilter(Mode->value(),Hmin->value(),Hmax->value(),Smin->value(),Smax->value());
}
void HSFilterForm::cb_Apply5(Fl_Button* o, void* v) {
  ((HSFilterForm*)(o->parent()->user_data()))->cb_Apply5_i(o,v);
}

void HSFilterForm::cb_Hmin_i(Fl_Value_Slider*, void*) {
  // Rmin->color(fl_rgb_color(Rmin->value(),0,0));
Hmax->minimum(Hmin->value());
changecolor();
Hmin->redraw();
}
void HSFilterForm::cb_Hmin(Fl_Value_Slider* o, void* v) {
  ((HSFilterForm*)(o->parent()->parent()->user_data()))->cb_Hmin_i(o,v);
}

void HSFilterForm::cb_Hmax_i(Fl_Value_Slider*, void*) {
  //Rmax->color(fl_rgb_color(Rmax->value(),0,0));
Hmin->maximum(Hmax->value());
changecolor();
}
void HSFilterForm::cb_Hmax(Fl_Value_Slider* o, void* v) {
  ((HSFilterForm*)(o->parent()->parent()->user_data()))->cb_Hmax_i(o,v);
}

void HSFilterForm::cb_Smin_i(Fl_Value_Slider*, void*) {
  // Smin->color(fl_rgb_color(0,Gmin->value(),0));
Smax->minimum(Smin->value());
changecolor();
}
void HSFilterForm::cb_Smin(Fl_Value_Slider* o, void* v) {
  ((HSFilterForm*)(o->parent()->parent()->user_data()))->cb_Smin_i(o,v);
}

void HSFilterForm::cb_Smax_i(Fl_Value_Slider*, void*) {
  Smin->maximum(Smax->value());
changecolor();
}
void HSFilterForm::cb_Smax(Fl_Value_Slider* o, void* v) {
  ((HSFilterForm*)(o->parent()->parent()->user_data()))->cb_Smax_i(o,v);
}

HSFilterForm::HSFilterForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(451, 269, "Hue - Saturation  Filter");
    window->box(FL_UP_BOX);
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(310, 210, 120, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok8);
    } // Fl_Return_Button* Ok
    { Fl_Button* o = new Fl_Button(150, 210, 120, 30, "Apply");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply5);
    } // Fl_Button* o
    { Chart = new Fl_Group(10, 14, 185, 181);
      Chart->box(FL_UP_FRAME);
      { Cm = new Fl_Box(63, 68, 74, 74);
        Cm->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* Cm
      { C3 = new Fl_Box(30, 35, 60, 60);
        C3->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* C3
      { C1 = new Fl_Box(30, 115, 60, 60);
        C1->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* C1
      { C2 = new Fl_Box(110, 115, 60, 60);
        C2->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* C2
      { C4 = new Fl_Box(110, 35, 60, 60);
        C4->box(FL_DIAMOND_DOWN_BOX);
      } // Fl_Box* C4
      Chart->end();
    } // Fl_Group* Chart
    { Sld = new Fl_Group(240, 31, 190, 159);
      { Hmin = new Fl_Value_Slider(240, 31, 30, 159, "Hmin");
        Hmin->type(4);
        Hmin->box(FL_GTK_DOWN_BOX);
        Hmin->color((Fl_Color)14);
        Hmin->labelfont(1);
        Hmin->labelcolor((Fl_Color)1);
        Hmin->maximum(180);
        Hmin->step(1);
        Hmin->textsize(14);
        Hmin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Hmin->callback((Fl_Callback*)cb_Hmin);
        Hmin->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* Hmin
      { Hmax = new Fl_Value_Slider(280, 31, 30, 159, "Hmax");
        Hmax->type(4);
        Hmax->box(FL_GTK_DOWN_BOX);
        Hmax->color((Fl_Color)14);
        Hmax->labelfont(1);
        Hmax->labelcolor((Fl_Color)1);
        Hmax->maximum(180);
        Hmax->step(1);
        Hmax->value(180);
        Hmax->textsize(14);
        Hmax->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Hmax->callback((Fl_Callback*)cb_Hmax);
        Hmax->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* Hmax
      { Smin = new Fl_Value_Slider(355, 31, 30, 159, "Smin");
        Smin->type(4);
        Smin->box(FL_GTK_DOWN_BOX);
        Smin->color((Fl_Color)5);
        Smin->labelfont(1);
        Smin->labelcolor((Fl_Color)2);
        Smin->maximum(255);
        Smin->step(1);
        Smin->textsize(14);
        Smin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Smin->callback((Fl_Callback*)cb_Smin);
        Smin->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* Smin
      { Smax = new Fl_Value_Slider(400, 31, 30, 159, "Smax");
        Smax->type(4);
        Smax->box(FL_GTK_DOWN_BOX);
        Smax->color((Fl_Color)5);
        Smax->labelfont(1);
        Smax->labelcolor((Fl_Color)2);
        Smax->maximum(255);
        Smax->step(1);
        Smax->value(255);
        Smax->textsize(14);
        Smax->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Smax->callback((Fl_Callback*)cb_Smax);
        Smax->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* Smax
      Sld->end();
    } // Fl_Group* Sld
    { Mode = new Fl_Check_Button(25, 220, 110, 15, "Color Mask");
      Mode->down_box(FL_DOWN_BOX);
      Mode->value(1);
    } // Fl_Check_Button* Mode
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void HSFilterForm::show() {
  changecolor();
window->show();
FirstTime=true;
}

void HSFilterForm::hide() {
  window->hide();
}

void HSFilterForm::changecolor() {
  C1->color(fl_hsv_color(Hmin->value(),Smin->value(), 255));
C2->color(fl_hsv_color(Hmax->value(),Smin->value(), 255));
C3->color(fl_hsv_color(Hmin->value(),Smax->value(), 255));
C4->color(fl_hsv_color(Hmax->value(),Smax->value(), 255));


unsigned char hm, sm;

hm=(Hmax->value()+Hmin->value())/2;
sm=(Smax->value()+Smin->value())/2;


Cm->color(fl_hsv_color(hm,sm,255));

Chart->redraw();
Sld->redraw();
}

void Filter2DForm::cb_Ok9_i(Fl_Return_Button*, void*) {
  p->flt.row=Row->value();
p->flt.col=Col->value();
p->flt.anchorx=X->value();
p->flt.anchory=Y->value();
float *d=Data->GetData();
for(int i=0;i<p->flt.row*p->flt.col;i++)
   p->flt.data[i]=d[i];

hide();
}
void Filter2DForm::cb_Ok9(Fl_Return_Button* o, void* v) {
  ((Filter2DForm*)(o->parent()->user_data()))->cb_Ok9_i(o,v);
}

void Filter2DForm::cb_Apply6_i(Fl_Button*, void*) {
  if(X->value()>=Row->value() || Y->value()>=Row->value()){
  fl_alert("The anchor shoud lie within the kernel");
  return;
}
if(FirstTime==false)
  p->Undo(false);
else
  FirstTime=false;  
p->Filter2D(Row->value(),Col->value(),X->value(),Y->value(),Data->GetData());
}
void Filter2DForm::cb_Apply6(Fl_Button* o, void* v) {
  ((Filter2DForm*)(o->parent()->user_data()))->cb_Apply6_i(o,v);
}

void Filter2DForm::cb_Col_i(Fl_Counter*, void*) {
  if(Data->nCol > Col->value())
     Data->HideCol();
   else
     Data->ShowCol();
}
void Filter2DForm::cb_Col(Fl_Counter* o, void* v) {
  ((Filter2DForm*)(o->parent()->user_data()))->cb_Col_i(o,v);
}

void Filter2DForm::cb_Row_i(Fl_Counter*, void*) {
  if(Data->nRow > Row->value())
     Data->HideRow();
   else
     Data->ShowRow();
}
void Filter2DForm::cb_Row(Fl_Counter* o, void* v) {
  ((Filter2DForm*)(o->parent()->user_data()))->cb_Row_i(o,v);
}

Filter2DForm::Filter2DForm() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(529, 379, "Filter 2D");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    { Ok = new Fl_Return_Button(395, 335, 120, 30, "Ok");
      Ok->box(FL_GTK_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Ok9);
    } // Fl_Return_Button* Ok
    { Fl_Button* o = new Fl_Button(255, 335, 120, 30, "Apply");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)FL_SELECTION_COLOR);
      o->callback((Fl_Callback*)cb_Apply6);
    } // Fl_Button* o
    { Data = new Fl_MatrixReader(17, 68, 502, 252);
      Data->box(FL_DOWN_BOX);
      Data->color((Fl_Color)19);
      Data->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      Data->labeltype(FL_NORMAL_LABEL);
      Data->labelfont(0);
      Data->labelsize(14);
      Data->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      Data->align(FL_ALIGN_TOP);
      Data->when(FL_WHEN_RELEASE);
      Data->type(0);
      Data->SetRowCol(p->flt.row,p->flt.col);
      Data->SetData(p->flt.data);
      Data->end();
    } // Fl_MatrixReader* Data
    { Col = new Fl_Counter(20, 30, 56, 20, "Column ");
      Col->type(1);
      Col->minimum(1);
      Col->maximum(9);
      Col->step(1);
      Col->value(3);
      Col->callback((Fl_Callback*)cb_Col);
      Col->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Counter* Col
    { Row = new Fl_Counter(95, 30, 56, 20, "Row");
      Row->type(1);
      Row->minimum(1);
      Row->maximum(9);
      Row->step(1);
      Row->value(3);
      Row->callback((Fl_Callback*)cb_Row);
      Row->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Counter* Row
    { X = new Fl_Counter(190, 30, 56, 20, "Anchor X");
      X->type(1);
      X->minimum(-1);
      X->maximum(9);
      X->step(1);
      X->value(-1);
      X->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Counter* X
    { Y = new Fl_Counter(270, 30, 56, 20, "Anchor Y");
      Y->type(1);
      Y->minimum(-1);
      Y->maximum(9);
      Y->step(1);
      Y->value(-1);
      Y->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Counter* Y
    o->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void Filter2DForm::show() {
  window->show();
Row->value(p->flt.row);
Col->value(p->flt.col);
X->value(p->flt.anchorx);
Y->value(p->flt.anchory);
Data->SetData(p->flt.data);
FirstTime=true;
}

void Filter2DForm::hide() {
  window->hide();
}

void CaptureForm::cb_Oka_i(Fl_Return_Button*, void*) {
  hide();
}
void CaptureForm::cb_Oka(Fl_Return_Button* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_Oka_i(o,v);
}

void CaptureForm::cb_3_i(Fl_Button*, void*) {
  OpenCam();
}
void CaptureForm::cb_3(Fl_Button* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_3_i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_camera[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,17,17,17,19,19,
19,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,79,79,79,68,68,68,112,
112,112,85,85,85,143,143,143,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,31,31,31,82,82,82,
165,165,165,207,207,207,247,247,247,245,245,245,206,206,206,118,118,118,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,58,157,157,157,155,155,
155,151,151,151,184,184,184,204,204,204,234,234,234,227,227,227,210,210,210,177,
177,177,162,162,162,160,160,160,160,160,160,160,160,160,162,162,162,162,162,162,
163,163,163,164,164,164,164,164,164,165,165,165,164,164,164,162,162,162,161,161,
161,160,160,160,161,161,161,160,160,160,160,160,160,159,159,159,161,161,161,159,
159,159,159,159,159,163,163,163,169,169,169,158,158,158,99,99,99,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,62,62,62,165,165,165,190,190,190,227,227,227,245,245,245,244,244,244,242,
242,242,241,241,241,244,244,244,246,246,246,248,248,248,248,248,248,249,249,249,
247,247,247,248,248,248,250,250,250,250,250,250,251,251,251,251,251,251,249,249,
249,246,246,246,244,244,244,241,241,241,239,239,239,234,234,234,234,234,234,233,
233,233,232,232,232,232,232,232,230,230,230,232,232,232,233,233,233,229,229,229,
168,168,168,109,109,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,149,149,149,165,165,165,215,
215,215,238,238,238,241,241,241,241,241,241,242,242,242,243,243,243,243,243,243,
245,245,245,243,243,243,242,242,242,243,243,243,244,244,244,248,248,248,140,140,
140,56,56,56,64,64,64,137,137,137,58,58,58,190,190,190,221,221,221,226,226,226,
220,220,220,221,221,221,217,217,217,215,215,215,225,225,225,236,236,236,248,248,
248,248,248,248,199,199,199,144,144,144,88,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,
154,154,154,167,167,167,211,211,211,232,232,232,234,234,234,238,238,238,242,242,
242,245,245,245,246,246,246,249,249,249,248,248,248,248,248,248,247,247,247,246,
246,246,249,249,249,140,140,140,62,62,62,72,72,72,146,146,146,75,75,75,198,198,
198,245,245,245,244,244,244,243,243,243,244,244,244,242,242,242,242,242,242,234,
234,234,237,237,237,249,249,249,249,249,249,199,199,199,146,146,146,88,88,88,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,36,36,36,111,111,111,132,132,132,156,156,156,171,171,171,171,
171,171,172,172,172,173,173,173,173,173,173,173,173,173,176,176,176,173,173,173,
187,187,187,183,183,183,186,186,186,176,176,176,153,153,153,147,147,147,151,151,
151,154,154,154,151,151,151,152,152,152,145,145,145,151,151,151,149,149,149,150,
150,150,149,149,149,148,148,148,146,146,146,172,172,172,187,187,187,186,186,186,
149,149,149,120,120,120,87,87,87,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,31,31,31,90,90,90,109,109,
109,117,117,117,120,120,120,120,120,120,122,122,122,123,123,123,123,123,123,122,
122,122,122,122,122,105,105,105,217,217,217,230,230,230,229,229,229,230,230,230,
225,225,225,223,223,223,220,220,220,207,207,207,197,197,197,183,183,183,178,178,
178,183,183,183,202,202,202,214,214,214,224,224,224,224,224,224,224,224,224,229,
229,229,230,230,230,223,223,223,174,174,174,129,129,129,94,94,94,1,1,1,1,1,1,1,
1,1,1,1,1,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,
3,3,34,34,34,93,93,93,118,118,118,126,126,126,128,128,128,130,130,130,130,130,
130,132,132,132,132,132,132,130,130,130,132,132,132,104,104,104,243,243,243,245,
245,245,244,244,244,242,242,242,246,246,246,230,230,230,208,208,208,222,222,221,
246,246,246,236,236,236,226,226,226,232,232,232,225,225,225,211,211,211,217,217,
217,241,241,241,247,247,247,245,245,245,246,246,246,241,241,241,184,184,184,134,
134,134,101,101,101,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,35,35,35,92,92,92,116,116,116,124,124,124,
128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
129,107,107,107,242,242,242,244,244,244,241,241,241,243,243,243,223,223,223,201,
201,201,229,229,228,218,218,213,187,186,183,177,176,175,175,174,175,180,178,180,
198,198,198,228,228,228,218,218,218,195,195,195,241,241,241,246,246,246,247,247,
247,236,236,236,178,178,178,130,130,130,98,98,98,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,34,34,34,90,
90,90,116,116,116,124,124,124,127,127,127,128,128,128,128,128,128,129,129,129,
129,129,129,128,128,128,128,128,128,102,102,102,234,234,234,240,240,240,244,244,
244,224,224,224,200,200,200,223,223,223,173,173,173,167,167,167,211,211,211,225,
225,226,223,223,224,221,221,223,203,203,203,157,157,157,191,191,191,193,193,193,
186,186,186,248,248,248,243,243,243,232,232,232,173,173,173,128,128,128,97,97,
97,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,2,2,2,3,3,3,3,3,3,35,35,35,86,86,86,114,114,114,123,123,123,126,126,126,126,
126,126,127,127,127,127,127,127,127,127,127,128,128,128,129,129,129,99,99,99,
228,228,228,242,242,242,236,236,236,205,205,205,221,221,221,149,149,149,188,188,
189,217,218,221,139,140,143,84,85,86,63,65,64,86,87,86,147,147,147,220,220,220,
160,160,160,181,181,181,163,163,163,208,208,208,248,248,248,226,226,226,170,170,
170,123,123,123,94,94,94,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,35,35,35,83,83,83,112,112,112,121,
121,121,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,126,126,126,
128,128,128,99,99,99,228,228,228,243,243,243,215,215,215,206,206,206,164,164,
164,180,180,180,180,180,180,42,46,45,9,12,9,17,22,14,22,28,15,13,18,8,9,9,9,55,
55,55,190,190,190,138,138,138,178,178,178,152,152,152,237,237,237,219,219,219,
168,168,168,118,118,118,93,93,93,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,35,35,35,81,81,81,111,111,
111,120,120,120,123,123,123,123,123,123,124,124,124,124,124,124,125,125,125,124,
124,124,126,126,126,99,99,99,224,224,224,236,236,236,173,173,173,186,186,186,
136,136,136,196,196,196,32,33,32,10,16,8,26,33,20,39,48,29,47,57,33,39,47,24,25,
25,24,10,10,10,53,53,54,187,187,187,154,154,154,134,134,134,210,210,210,216,
216,216,165,165,165,118,118,118,90,90,90,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,40,40,40,79,79,79,
109,109,109,117,117,117,122,122,122,122,122,122,123,123,123,123,123,123,123,123,
123,124,124,124,124,124,124,101,101,101,221,221,221,230,230,230,143,143,143,149,
149,149,171,171,171,97,97,97,8,9,7,19,27,13,43,54,26,73,89,47,95,112,66,90,107,
63,36,45,19,22,27,17,7,8,11,133,133,133,170,169,165,132,132,132,182,182,182,
206,206,206,162,162,162,113,113,113,89,89,89,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,39,39,39,77,77,
77,108,108,108,116,116,116,121,121,121,121,121,121,122,122,122,123,123,123,123,
123,123,123,123,123,124,124,124,97,97,97,214,214,214,224,224,224,128,128,128,
137,137,137,186,186,186,27,27,27,22,23,21,24,32,14,54,66,34,78,94,48,121,139,89,
112,130,82,57,67,39,22,27,18,10,10,13,81,80,82,186,185,182,107,108,108,164,164,
164,198,198,198,159,159,159,111,111,111,87,87,87,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,41,41,41,75,
75,75,106,106,106,115,115,115,120,120,120,120,120,120,121,121,121,121,121,121,
121,121,121,121,121,121,124,124,124,93,93,93,209,209,209,221,221,221,132,132,
132,148,148,148,182,182,182,20,20,20,29,30,28,26,34,16,47,59,26,70,85,41,76,94,
44,71,89,42,47,56,29,31,35,27,16,16,21,69,68,71,190,189,187,84,84,84,158,158,
158,196,196,196,160,160,160,109,109,109,87,87,87,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,41,41,41,73,
73,73,105,105,105,114,114,114,118,118,118,118,118,118,119,119,119,119,119,119,
119,119,119,120,120,120,123,123,123,94,94,94,209,209,209,219,219,219,137,137,
137,144,144,144,200,200,200,34,34,34,16,17,16,34,40,30,33,43,19,57,72,35,49,66,
23,46,63,22,28,37,13,41,44,40,6,6,14,105,105,109,169,169,168,72,72,72,158,158,
158,190,190,190,155,155,155,104,104,104,86,86,86,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,39,39,39,72,
72,72,104,104,104,113,113,113,117,117,117,117,117,117,118,118,118,118,118,118,
119,119,119,120,120,120,122,122,122,97,97,97,212,212,212,220,220,220,154,154,
154,116,116,116,202,202,202,109,109,109,4,5,5,34,39,37,44,52,38,37,50,24,40,55,
23,48,62,31,57,65,43,16,18,16,18,19,25,183,182,187,115,114,115,79,79,79,162,
162,162,188,188,188,151,151,151,104,104,104,86,86,86,2,2,2,3,3,3,3,3,3,3,3,3,5,
5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,39,39,
39,72,72,72,101,101,101,111,111,111,115,115,115,115,115,115,116,116,116,117,
117,117,117,117,117,119,119,119,116,116,116,98,98,98,211,211,211,225,225,225,
182,182,182,97,97,97,147,147,147,202,202,202,70,70,70,3,3,3,28,28,28,55,55,55,
61,61,61,49,49,48,12,12,12,11,11,11,129,129,129,188,188,189,65,65,64,103,103,
103,176,176,176,184,184,184,148,148,148,101,101,101,85,85,85,2,2,2,3,3,3,3,3,3,
3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,
38,38,38,72,72,72,100,100,100,109,109,109,115,115,115,115,115,115,116,116,116,
116,116,116,117,117,117,119,119,119,120,120,120,89,89,89,201,201,201,219,219,
219,199,199,199,126,126,126,82,82,82,149,149,149,209,209,209,110,110,110,29,29,
29,6,6,6,5,5,5,12,12,12,41,41,41,152,152,152,209,209,209,89,89,89,71,71,71,130,
130,130,183,183,183,182,182,182,150,150,150,97,97,97,89,89,89,2,2,2,3,3,3,3,3,3,
3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,
36,36,36,70,70,70,98,98,98,109,109,109,112,112,112,113,113,113,113,113,113,114,
114,114,114,114,114,114,114,114,119,119,119,88,88,88,200,200,200,217,217,217,
207,207,207,159,159,159,93,93,93,73,73,73,131,131,131,214,214,214,206,206,206,
162,162,162,150,150,150,173,173,173,218,218,218,178,178,178,86,86,86,65,65,65,
106,106,106,158,158,158,186,186,186,178,178,178,145,145,145,95,95,95,92,92,92,2,
2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
2,2,3,3,3,3,3,3,35,35,35,74,74,74,95,95,95,111,111,111,113,113,113,113,113,
113,114,114,114,115,115,115,115,115,115,113,113,113,118,118,118,88,88,88,190,
190,190,213,213,213,206,206,206,187,187,187,145,145,145,87,87,87,67,67,67,76,76,
76,110,110,110,146,146,146,160,160,160,132,132,132,91,91,91,63,63,63,68,68,68,
95,95,95,142,142,142,168,168,168,185,185,185,175,175,175,140,140,140,96,96,96,
92,92,92,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,3,3,3,3,3,3,31,31,31,83,83,83,83,83,83,87,87,87,93,93,93,93,93,
93,94,94,94,95,95,95,96,96,96,97,97,97,96,96,96,101,101,101,193,193,193,197,
197,197,194,194,194,190,190,190,172,172,172,139,139,139,101,101,101,78,78,78,64,
64,64,60,60,60,59,59,59,59,59,59,64,64,64,79,79,79,104,104,104,133,133,133,157,
157,157,177,177,177,189,189,189,184,184,184,170,170,170,131,131,131,87,87,87,2,
2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
2,2,3,3,3,3,3,3,28,28,28,93,93,93,125,125,125,155,155,155,190,190,190,198,198,
198,200,200,200,200,200,200,202,202,202,199,199,199,202,202,202,210,210,210,224,
224,224,220,220,220,222,222,222,217,217,217,203,203,203,182,182,182,162,162,162,
142,142,142,122,122,122,110,110,110,106,106,106,112,112,112,122,122,122,140,140,
140,154,154,154,165,165,165,185,185,185,196,196,196,202,202,202,184,184,184,145,
145,145,92,92,92,71,71,71,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,6,6,6,102,102,102,107,107,107,118,
118,118,141,141,141,145,145,145,151,151,151,147,147,147,146,146,146,147,147,147,
148,148,148,148,148,148,142,142,142,147,147,147,142,142,142,139,139,139,134,134,
134,128,128,128,115,115,115,107,107,107,102,102,102,99,99,99,92,92,92,92,92,92,
93,93,93,98,98,98,103,103,103,114,114,114,121,121,121,125,125,125,124,124,124,
123,123,123,96,96,96,84,84,84,43,43,43,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,5,5,5,43,43,43,
81,81,81,85,85,85,61,61,61,44,44,44,47,47,47,39,39,39,34,34,34,31,31,31,35,35,
35,30,30,30,7,7,7,8,8,8,3,3,3,3,3,3,30,30,30,49,49,49,36,36,36,26,26,26,26,26,
26,28,28,28,31,31,31,29,29,29,40,40,40,39,39,39,34,34,34,43,43,43,41,41,41,29,
29,29,31,31,31,56,56,56,112,112,112,151,151,151,102,102,102,28,28,28,3,3,3,3,3,
3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,
3,3,3,3,26,26,26,137,137,137,124,124,124,69,69,69,54,54,54,42,42,42,49,49,49,
70,70,70,88,88,88,78,78,78,39,39,39,31,31,31,50,50,50,3,3,3,5,5,5,52,52,52,100,
100,100,95,95,95,95,95,95,82,82,82,84,84,84,105,105,105,92,92,92,103,103,103,
108,108,108,90,90,90,93,93,93,122,122,122,120,120,120,125,125,125,127,127,127,
123,123,123,157,157,157,170,170,170,102,102,102,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,53,53,
53,147,147,147,78,78,78,14,14,14,21,21,21,34,34,34,21,21,21,44,44,44,91,91,91,
113,113,113,112,112,112,100,100,100,46,46,46,16,16,16,38,38,38,88,88,88,117,117,
117,122,122,122,115,115,115,113,113,113,121,121,121,136,136,136,127,127,127,149,
149,149,166,166,166,152,152,152,132,132,132,152,152,152,174,174,174,170,170,170,
163,163,163,108,108,108,35,35,35,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,88,88,88,
172,172,172,80,80,80,14,14,14,46,46,46,40,40,40,58,58,58,80,80,80,67,67,67,101,
101,101,120,120,120,151,151,151,129,129,129,57,57,57,17,17,17,37,37,37,110,110,
110,109,109,109,111,111,111,110,110,110,125,125,125,154,154,154,157,157,157,179,
179,179,200,200,200,183,183,183,173,173,173,159,159,159,86,86,86,17,17,17,2,2,2,
3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,126,126,126,188,188,188,82,82,
82,55,55,55,32,32,32,34,34,34,32,32,32,39,39,39,76,76,76,123,123,123,107,107,
107,119,119,119,167,167,167,167,167,167,117,117,117,80,80,80,89,89,89,114,114,
114,86,86,86,99,99,99,170,170,170,203,203,203,178,178,178,143,143,143,152,152,
152,159,159,159,9,9,9,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,19,19,19,155,155,155,192,192,192,84,84,84,53,53,53,69,69,69,84,84,84,
70,70,70,155,155,155,220,220,220,130,130,130,52,52,52,42,42,42,85,85,85,131,
131,131,184,184,184,161,161,161,144,144,144,181,181,181,196,196,196,143,143,143,
126,126,126,158,158,158,169,169,169,174,174,174,197,197,197,165,165,165,32,32,
32,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,37,37,37,
187,187,187,197,197,197,98,98,98,87,87,87,64,64,64,55,55,55,46,46,46,89,89,89,
114,114,114,138,138,138,89,89,89,91,91,91,120,120,120,108,108,108,105,105,105,
160,160,160,149,149,149,112,112,112,138,138,138,174,174,174,186,186,186,168,168,
168,160,160,160,170,170,170,198,198,198,203,203,203,78,78,78,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,67,67,200,200,200,192,192,
192,100,100,100,68,68,68,35,35,35,42,42,42,50,50,50,96,96,96,156,156,156,121,
121,121,117,117,117,108,108,108,85,85,85,61,61,61,128,128,128,152,152,152,132,
132,132,159,159,159,188,188,188,178,178,178,167,167,167,154,154,154,144,144,144,
147,147,147,185,185,185,220,220,220,143,143,143,14,14,14,3,3,3,3,3,3,3,3,3,5,5,
5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,98,98,98,220,220,220,176,176,176,80,80,
80,41,41,41,56,56,56,60,60,60,64,64,64,103,103,103,184,184,184,134,134,134,96,
96,96,101,101,101,84,84,84,126,126,126,166,166,166,187,187,187,172,172,172,183,
183,183,171,171,171,159,159,159,157,157,157,163,163,163,172,172,172,178,178,178,
219,219,219,219,219,219,162,162,162,5,5,5,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,9,9,9,126,126,126,230,230,230,181,181,181,68,68,68,56,56,56,
67,67,67,36,36,36,25,25,25,105,105,105,125,125,125,151,151,151,134,134,134,154,
154,154,167,167,167,153,153,153,203,203,203,200,200,200,208,208,208,210,210,210,
209,209,209,207,207,207,198,198,198,187,187,187,162,162,162,125,125,125,92,92,
92,70,70,70,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
20,20,20,155,155,155,241,241,241,151,151,151,35,35,35,19,19,19,19,19,19,22,22,
22,96,96,96,161,161,161,194,194,194,230,230,230,222,222,222,222,222,222,214,
214,214,199,199,199,190,190,190,163,163,163,129,129,129,97,97,97,65,65,65,37,37,
37,8,8,8,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,42,42,42,176,176,176,236,236,236,152,152,152,143,
143,143,177,177,177,193,193,193,206,206,206,201,201,201,190,190,190,159,159,159,
121,121,121,80,80,80,58,58,58,34,34,34,8,8,8,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,67,67,67,184,184,184,192,192,192,156,156,156,121,
121,121,92,92,92,66,66,66,36,36,36,7,7,7,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,
5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,36,36,36,7,7,
7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,
5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_camera(idata_camera, 64, 64, 3, 0);

void CaptureForm::cb_4_i(Fl_Button*, void*) {
  OpenVideo();
}
void CaptureForm::cb_4(Fl_Button* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_4_i(o,v);
}

static unsigned char idata_video[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,13,13,13,6,6,6,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,9,9,9,77,77,74,48,48,48,72,72,72,90,90,90,60,60,60,1,1,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,9,9,101,101,97,173,173,165,253,253,241,253,253,243,233,233,224,
123,123,118,59,59,59,80,80,80,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,41,41,39,170,170,162,254,254,243,254,254,
245,254,254,249,254,254,249,252,252,245,249,249,238,245,245,231,196,196,185,97,
97,94,34,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,14,
14,14,46,46,46,73,73,73,83,83,83,108,108,107,206,206,204,254,254,250,253,253,
249,250,250,243,245,245,235,240,240,227,234,234,219,228,228,213,222,222,207,155,
155,146,27,27,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,8,101,101,96,171,171,163,
254,254,243,203,203,198,108,108,106,60,60,60,56,56,56,54,54,54,52,52,52,114,114,
111,215,215,208,240,240,231,232,232,220,224,224,211,214,214,201,194,194,184,137,
137,131,77,77,74,17,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,13,109,109,104,187,187,177,254,254,
242,254,254,245,254,254,249,254,254,249,254,254,249,250,250,245,170,170,166,67,
67,67,50,50,50,50,50,50,50,50,50,53,53,53,127,127,123,191,191,182,139,139,133,
79,79,76,25,25,25,30,30,30,34,34,34,19,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,16,16,16,50,50,50,78,78,77,155,
155,150,249,249,243,254,254,250,254,254,250,252,252,248,251,251,245,248,248,241,
245,245,238,241,241,233,227,227,218,126,126,121,59,59,59,71,71,71,57,57,57,42,
42,42,19,19,19,38,38,38,45,45,45,35,35,35,13,13,13,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,16,109,109,103,173,173,164,144,
144,139,81,81,81,67,67,67,60,60,60,54,54,54,72,72,71,176,176,171,246,246,239,
245,245,236,241,241,232,237,237,227,231,231,221,222,222,213,208,208,199,159,159,
153,84,82,80,21,20,20,41,41,41,49,49,49,40,40,40,16,16,16,2,2,2,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,16,108,108,103,186,186,176,
254,254,241,254,254,243,254,254,248,254,254,248,219,219,214,102,102,100,52,52,
52,51,51,51,50,50,50,50,50,50,84,84,82,181,181,173,220,220,211,204,204,197,157,
157,152,101,99,96,48,44,43,57,52,52,62,58,58,41,41,41,17,17,17,3,3,3,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,20,20,20,84,84,82,231,
231,220,254,254,245,254,254,250,254,254,250,254,254,249,253,253,247,250,250,244,
248,248,241,242,242,234,171,171,164,69,69,68,49,49,49,53,53,53,67,67,67,58,58,
58,70,70,68,48,44,44,57,52,52,65,61,61,51,48,48,22,21,21,3,3,3,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,101,101,96,54,54,53,78,
78,78,78,78,78,65,65,65,63,63,63,148,148,145,245,245,241,251,251,246,247,247,
241,245,245,237,240,240,232,236,236,226,227,227,217,218,218,208,192,192,184,93,
93,91,40,40,40,22,22,22,41,41,41,54,52,52,51,48,48,22,20,20,3,3,3,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,120,120,114,198,198,
189,253,253,242,253,253,244,239,239,233,124,124,122,54,54,54,52,52,52,52,52,52,
51,51,51,66,66,65,169,169,164,232,232,224,228,228,219,219,219,209,202,202,193,
154,154,148,92,92,89,36,36,35,42,42,42,50,50,50,40,40,40,16,16,16,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,10,10,9,42,42,41,105,105,100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,77,77,
74,198,198,189,253,253,242,253,253,244,254,254,247,254,254,249,254,254,249,253,
253,248,250,250,244,198,198,192,82,82,81,48,48,48,48,48,48,48,48,48,50,50,50,92,
92,90,135,135,131,93,93,89,37,37,36,41,41,41,50,50,50,40,40,40,15,15,15,2,2,2,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,
1,1,1,57,57,55,133,133,127,167,167,159,241,241,231,249,249,239,247,247,237,
200,200,192,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,22,22,22,52,52,52,80,80,80,79,79,79,147,147,144,
244,244,239,253,253,248,252,252,247,248,248,241,247,247,240,243,243,235,240,240,
231,234,234,226,224,224,215,141,141,136,67,67,66,54,54,54,40,40,40,22,22,22,39,
39,39,48,48,48,38,38,38,15,15,15,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,1,1,15,15,14,53,53,52,127,127,126,138,138,135,94,94,91,62,62,62,73,
73,73,80,80,80,204,204,194,241,241,228,241,241,228,241,241,228,241,241,228,236,
236,226,102,102,100,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,26,26,26,53,53,53,80,80,80,80,80,80,68,68,68,59,59,59,
54,54,54,53,53,53,68,68,67,168,168,163,240,240,231,238,238,229,232,232,223,227,
227,217,217,217,207,201,201,193,157,156,151,101,99,96,39,37,36,36,35,35,42,42,
42,35,35,35,14,14,14,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,21,
21,21,60,60,59,181,181,177,254,254,250,254,254,250,254,254,250,252,252,247,235,
235,228,68,68,68,58,58,58,55,55,55,98,98,95,231,231,217,231,231,217,231,231,217,
228,228,216,225,225,214,172,172,164,52,52,52,37,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,78,78,78,83,83,83,99,99,96,85,85,83,
86,86,83,83,83,81,52,52,52,52,52,52,52,52,52,49,49,49,48,48,48,81,81,79,176,
176,169,198,198,189,154,153,148,99,97,94,44,40,39,44,39,39,51,46,46,38,35,35,12,
12,12,3,3,3,0,0,0,0,0,0,1,1,1,16,16,16,68,68,67,128,128,127,140,140,138,187,
187,182,190,190,183,75,75,75,83,83,83,76,76,76,179,179,174,249,249,242,249,249,
242,249,249,242,248,248,242,244,244,237,137,137,133,47,47,47,47,47,47,47,47,47,
175,175,165,217,217,203,213,213,200,212,212,199,209,209,197,208,208,196,85,85,
82,45,45,45,46,46,46,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,49,49,49,69,69,67,57,57,57,108,108,108,42,42,42,52,52,51,98,98,96,55,
55,54,50,50,49,51,51,51,62,62,62,55,55,55,41,41,41,31,29,29,38,33,33,43,37,37,
35,31,31,16,14,14,5,4,4,15,15,15,4,4,4,22,22,22,40,40,40,59,59,59,245,245,242,
255,255,253,255,255,253,255,255,253,252,252,246,245,245,238,79,79,78,56,56,56,
54,54,54,82,82,80,235,235,226,239,239,230,239,239,230,238,238,229,234,234,225,
206,206,198,52,52,52,45,45,45,45,45,45,85,85,81,203,203,189,202,202,189,201,201,
188,200,200,189,192,192,181,151,151,144,51,51,51,38,38,38,26,26,26,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,22,22,22,64,64,
64,114,114,114,50,50,50,40,40,40,45,45,45,87,87,84,85,85,83,44,44,44,19,19,19,
18,18,18,22,22,22,44,42,42,100,97,96,136,134,134,146,146,145,207,207,205,255,
255,251,206,206,201,83,83,83,75,75,75,68,68,68,166,166,163,252,252,247,252,252,
247,252,252,247,250,250,244,246,246,238,161,161,156,48,48,48,48,48,48,48,48,48,
160,160,152,225,225,213,224,224,212,223,223,211,219,219,208,214,214,204,113,113,
108,56,56,56,65,65,65,66,66,66,151,151,143,166,166,157,148,148,139,121,121,114,
82,86,88,62,72,89,23,44,82,19,27,42,28,27,27,18,16,16,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,15,15,15,10,10,10,22,22,22,36,
36,36,46,46,46,49,49,49,41,41,41,52,52,51,88,88,85,55,55,54,47,47,47,66,66,66,
237,237,232,254,254,249,254,254,249,254,254,249,254,254,249,252,252,247,90,90,
88,53,53,53,53,53,53,71,71,70,236,236,228,244,244,236,244,244,236,243,243,235,
238,238,230,224,224,215,59,59,58,45,45,45,45,45,45,68,68,67,208,208,196,211,211,
199,210,210,199,203,203,193,189,189,179,160,160,151,49,49,49,33,33,33,19,22,28,
20,29,46,51,70,101,28,55,103,20,55,117,17,63,147,16,67,161,14,71,171,14,72,177,
29,68,140,54,52,53,34,33,34,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,7,7,7,8,8,8,19,19,19,33,33,33,44,44,44,46,46,46,41,41,
41,28,28,28,15,15,15,70,70,67,68,68,67,155,155,150,251,251,243,252,252,245,252,
252,249,252,252,249,251,251,248,174,174,169,49,49,49,49,49,49,49,49,49,155,155,
148,232,232,221,231,231,220,229,229,218,224,224,214,221,221,211,144,144,139,68,
68,68,70,70,70,67,67,67,136,136,131,156,156,147,127,128,121,89,92,92,70,77,88,
58,74,100,33,56,97,26,56,110,30,70,143,31,78,161,30,81,171,29,83,179,27,85,187,
25,88,195,24,88,201,21,86,206,20,88,210,18,89,214,23,91,205,70,68,70,58,55,56,
2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,
10,6,6,6,14,14,14,26,26,26,33,33,33,37,37,37,34,34,34,65,65,65,124,124,124,30,
30,30,107,107,102,234,234,223,243,243,232,243,243,232,244,244,235,244,244,235,
233,233,224,69,69,68,47,47,47,47,47,47,76,76,74,214,214,202,218,218,206,213,213,
202,197,197,187,181,181,171,152,152,144,38,38,37,22,24,29,18,24,36,23,36,60,45,
64,99,40,65,111,43,78,139,47,87,159,47,91,168,47,95,177,46,98,185,45,100,192,
44,101,199,42,102,204,40,102,209,37,104,217,35,102,220,32,105,226,29,103,229,
26,102,233,25,102,234,23,101,235,18,103,240,69,84,112,65,62,63,16,15,15,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,6,6,6,
112,112,112,112,112,112,26,26,26,23,23,23,22,22,22,55,55,55,88,88,88,25,25,25,
170,170,161,231,231,218,231,231,218,231,231,218,231,231,218,230,230,218,151,151,
146,68,68,68,66,66,66,63,63,63,120,120,114,134,134,127,95,98,97,74,81,87,64,76,
94,47,66,96,40,64,105,47,79,131,54,91,151,57,96,162,59,100,171,61,105,180,62,
109,188,63,113,198,62,115,203,61,116,209,60,120,216,58,120,219,56,119,222,52,
119,227,49,119,232,47,119,235,43,117,238,42,117,239,40,114,241,33,114,245,32,
113,245,28,111,247,25,110,249,23,109,249,60,96,153,72,69,70,34,33,33,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,11,11,11,59,
59,59,66,66,66,12,12,12,10,10,10,10,10,10,9,9,9,8,8,8,43,43,41,200,200,189,215,
215,202,200,200,189,186,186,175,168,168,159,133,133,127,25,27,32,15,21,32,17,29,
51,22,41,73,36,60,100,40,72,123,48,86,145,54,93,156,58,99,165,61,104,173,66,
110,181,69,115,188,71,120,198,73,123,203,74,127,210,75,129,216,75,130,221,74,
132,226,73,134,231,72,134,232,70,135,235,69,135,238,65,133,241,63,133,241,56,
130,246,56,130,246,50,127,250,49,125,249,44,123,251,40,121,252,38,121,252,37,
120,253,35,119,253,28,117,254,48,109,205,76,74,74,49,47,48,4,4,4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,3,3,3,4,4,4,9,9,
9,16,16,16,23,23,23,26,26,26,22,22,22,97,97,92,98,100,100,71,77,84,55,67,88,
33,52,86,25,49,93,26,57,113,32,68,133,38,78,146,43,85,155,47,91,162,53,100,173,
58,107,181,62,113,189,67,119,196,72,124,203,75,130,211,78,133,217,80,135,219,
83,140,226,84,142,231,84,143,233,84,145,236,84,147,240,84,148,241,83,148,243,
80,147,246,80,147,246,78,148,249,73,143,250,72,142,251,64,139,252,60,136,252,
58,134,253,55,131,253,51,130,254,47,128,254,47,128,254,41,120,254,40,120,252,
48,125,255,45,120,233,80,78,82,64,62,63,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,35,35,35,30,30,30,16,16,16,17,18,22,11,15,
26,8,17,40,6,23,59,9,30,77,13,41,102,17,50,121,21,60,135,24,65,142,28,71,151,
33,81,163,37,86,168,42,93,177,47,101,184,53,108,191,58,115,199,64,122,206,68,
127,211,73,132,217,77,138,223,81,142,228,84,146,233,87,148,236,88,149,237,91,
153,243,91,153,244,91,153,244,91,155,247,91,156,249,90,157,251,90,157,251,89,
156,252,87,155,253,80,151,253,80,151,253,78,150,254,71,144,255,66,141,255,61,
139,254,60,138,254,55,133,254,55,133,254,52,131,255,49,129,255,67,140,255,68,
115,232,46,77,144,72,72,79,66,64,65,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,21,21,21,32,31,32,18,40,91,9,42,119,10,
47,129,13,52,136,23,54,133,21,61,147,23,71,160,25,76,169,30,83,177,34,90,186,
39,95,193,44,103,200,49,111,204,54,118,209,59,123,215,65,130,221,68,135,226,75,
140,232,79,146,235,83,149,239,86,152,243,89,155,246,91,158,248,93,160,250,94,
161,251,94,162,251,94,162,251,94,162,251,94,162,251,94,162,251,94,162,251,93,
159,254,92,158,255,91,158,255,86,156,255,83,154,255,80,151,255,74,147,255,71,
144,255,64,142,254,62,140,254,61,139,254,58,133,255,66,140,251,65,127,244,43,60,
125,18,18,21,57,55,56,69,67,67,35,34,34,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,31,29,29,54,52,52,30,58,121,13,54,152,20,55,
154,38,49,111,20,24,33,22,23,29,29,33,53,30,51,89,36,89,182,38,104,209,43,108,
213,47,113,217,53,121,222,58,126,225,63,135,231,68,139,234,73,145,240,78,150,
244,82,156,247,85,158,249,88,160,250,91,162,251,94,164,253,96,166,254,97,167,
254,99,167,254,103,167,255,103,167,255,103,167,255,103,167,255,103,167,255,99,
165,255,97,164,255,92,161,255,90,159,255,86,157,255,81,153,255,81,153,255,77,
150,255,72,145,254,70,143,253,68,143,254,64,137,254,83,142,250,51,88,191,24,27,
41,20,20,19,39,38,38,73,71,71,49,48,48,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,28,29,64,61,62,50,70,124,20,62,152,24,28,
49,18,18,20,19,19,20,22,22,23,27,27,27,31,31,32,37,50,101,42,111,218,43,116,
225,50,122,230,54,128,233,60,137,238,63,140,240,71,148,244,74,153,247,78,157,
250,82,160,253,87,163,253,88,164,253,94,167,255,94,167,255,98,169,255,102,171,
255,102,171,255,105,171,255,108,171,255,108,171,255,106,169,255,105,168,255,103,
167,255,102,166,255,101,164,255,99,163,255,93,160,255,90,159,255,87,157,255,85,
155,255,81,151,254,80,149,254,75,146,255,87,148,252,126,172,253,64,90,160,21,22,
24,19,19,19,27,27,27,73,71,71,62,60,61,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,26,27,69,66,67,65,82,121,24,60,147,15,15,
15,17,17,17,19,19,19,24,24,24,27,27,27,31,31,31,36,36,54,42,102,208,44,125,231,
51,129,237,55,135,240,60,141,243,65,146,246,70,152,248,74,156,251,78,159,254,
82,163,255,86,165,255,89,167,255,95,170,255,99,172,255,102,174,255,102,174,255,
107,174,255,108,174,255,110,174,255,111,174,255,111,174,255,109,170,255,108,168,
255,108,168,255,107,167,255,102,165,255,101,164,255,95,161,255,95,161,255,93,
159,255,88,154,255,84,151,255,77,151,255,82,146,252,117,162,253,75,113,224,26,
27,43,19,19,19,18,18,18,67,66,66,64,61,62,22,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,18,19,70,67,68,74,86,115,27,73,183,
18,19,31,17,16,16,21,21,21,24,24,24,27,27,27,31,31,31,36,36,53,44,102,203,45,
126,237,49,132,241,54,137,244,59,144,247,64,150,249,69,154,250,73,160,253,77,
162,255,83,167,255,86,169,255,93,169,255,98,173,255,99,174,255,102,176,255,106,
176,255,107,175,255,112,175,255,113,176,255,113,176,255,113,176,255,111,173,255,
111,173,255,111,173,255,111,173,255,107,170,255,103,167,255,103,167,255,99,166,
255,98,165,255,97,163,255,92,159,255,86,154,254,88,153,254,105,157,245,112,152,
239,35,40,67,17,17,17,17,17,17,55,53,54,66,63,64,33,32,32,1,1,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,70,67,68,83,85,95,23,88,208,
24,48,111,17,17,18,20,20,20,22,22,22,27,27,27,30,30,30,35,35,39,48,74,172,45,
127,238,49,134,245,54,140,247,58,148,249,61,152,251,68,155,253,72,161,255,77,
164,255,82,168,255,88,170,255,95,174,255,96,175,255,100,176,255,104,177,255,106,
178,255,110,179,255,112,178,255,116,179,255,116,179,255,116,179,255,116,179,255,
114,176,255,114,176,255,114,176,255,113,174,255,108,171,253,110,168,255,106,167,
255,109,166,254,104,164,254,105,163,254,97,153,242,76,96,144,69,85,121,46,56,79,
24,24,27,18,18,18,16,16,16,38,38,38,67,66,66,46,45,46,4,4,4,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,64,62,62,86,82,83,30,96,202,
32,75,179,18,18,24,18,18,20,23,23,23,26,26,26,29,29,29,35,36,50,40,97,203,43,
133,241,47,138,246,52,145,250,57,151,252,61,155,254,65,158,254,71,163,255,77,
168,255,83,171,255,86,171,255,94,173,255,98,177,255,104,177,255,104,177,255,106,
178,255,111,179,255,114,181,255,116,183,255,119,183,255,121,183,255,122,181,255,
120,178,255,120,177,255,122,177,255,119,176,255,120,176,250,120,175,252,127,177,
251,141,183,251,119,161,233,75,95,153,38,41,51,31,31,31,27,27,27,24,24,24,21,21,
21,18,18,18,16,16,16,25,25,25,67,65,65,57,55,56,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,55,53,53,82,78,79,44,84,164,31,56,
127,20,18,23,19,18,18,21,21,21,25,25,25,29,29,29,34,38,89,39,128,239,41,135,246,
46,141,249,50,147,252,53,151,255,58,154,255,63,160,255,71,164,255,79,169,255,
84,173,255,88,174,255,96,176,255,98,177,255,103,177,255,109,180,255,111,181,
255,115,182,255,117,182,255,117,182,255,125,184,255,126,180,255,126,180,255,123,
179,254,126,181,255,126,181,255,131,183,253,135,179,250,120,144,220,69,91,171,
45,55,125,43,46,102,37,41,70,32,34,46,29,29,32,27,27,27,22,22,22,20,20,20,17,
17,17,14,14,14,15,15,15,65,63,63,57,55,55,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,42,40,41,78,75,76,49,48,50,14,14,14,14,
14,14,19,19,19,21,21,21,23,23,23,29,29,31,33,65,159,35,131,245,39,137,250,44,
144,252,48,150,255,53,154,255,57,159,255,66,164,255,70,165,255,77,170,255,85,
172,255,90,174,255,94,175,255,104,180,255,104,180,255,109,180,255,113,181,255,
116,183,255,120,184,255,122,185,255,124,185,255,124,185,255,127,183,255,127,183,
255,132,184,255,127,177,252,90,128,218,59,88,178,53,77,168,49,73,167,44,65,143,
39,55,119,35,47,107,32,39,77,29,29,50,24,24,29,22,22,23,19,19,19,17,17,17,14,
14,14,13,13,13,50,49,49,59,58,58,31,30,30,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,32,32,75,72,72,67,65,66,14,14,14,14,14,14,17,
17,17,19,19,19,25,25,33,36,74,181,32,128,245,33,134,248,38,142,252,42,147,255,
46,151,255,51,157,255,54,161,255,64,163,255,71,166,255,76,168,255,84,171,255,
90,174,255,97,177,255,100,178,255,106,180,255,109,182,255,115,185,255,120,186,
255,119,184,255,121,185,255,130,185,255,133,184,255,135,184,255,117,162,248,92,
132,229,63,96,210,59,95,213,55,95,209,50,87,200,47,84,197,41,73,178,37,66,157,
33,56,136,32,46,112,27,37,83,25,26,47,21,21,26,18,18,19,16,16,16,14,14,14,14,
14,14,34,34,34,62,60,61,46,45,45,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,26,26,26,72,69,70,73,71,72,15,15,15,14,14,14,15,15,15,19,
19,19,22,22,22,25,27,39,34,62,125,35,122,233,36,142,252,39,147,254,42,149,255,
51,157,255,57,161,255,65,165,255,74,166,255,78,169,255,83,172,255,90,175,255,
95,176,255,99,178,255,107,181,255,112,183,255,113,183,255,113,183,255,124,184,
255,124,184,255,121,179,254,101,150,234,76,112,210,65,104,217,62,108,234,59,110,
242,56,113,250,56,114,252,49,105,248,46,100,239,39,89,219,36,77,199,31,64,160,
29,54,137,25,42,111,24,30,75,19,19,30,17,17,18,16,16,16,13,13,13,12,12,12,24,
24,24,62,60,60,52,50,51,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,13,12,12,67,65,65,77,74,75,20,20,20,14,14,14,14,14,14,18,18,18,20,
20,20,22,22,22,27,27,27,32,51,103,43,131,237,45,142,252,44,151,255,50,157,255,
57,159,255,67,165,255,71,167,255,75,168,255,81,171,255,88,174,255,93,176,255,
100,179,255,107,181,255,112,182,255,122,186,255,121,184,254,121,179,253,103,144,
224,74,99,183,66,91,188,63,102,221,62,112,246,70,126,255,78,134,255,75,138,255,
75,136,255,65,127,255,58,120,255,42,104,250,33,92,235,29,75,197,27,63,162,23,
49,130,22,36,99,20,24,44,16,16,19,13,13,13,13,13,13,10,10,10,11,11,11,61,60,60,
52,51,51,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2,2,2,64,62,63,81,78,78,28,28,28,13,13,13,13,13,13,17,17,17,19,19,19,21,21,21,
25,25,25,28,28,30,34,40,67,40,51,88,48,75,138,63,108,179,72,111,177,73,100,152,
69,104,146,75,123,181,91,140,218,92,161,239,90,137,211,100,167,238,111,177,248,
112,180,250,116,183,254,108,157,236,87,112,180,66,83,155,64,92,185,61,95,213,59,
108,240,75,132,252,109,154,251,132,170,249,135,178,252,127,170,255,114,159,254,
93,145,255,58,127,255,38,107,255,31,84,234,28,70,185,24,54,147,20,42,119,19,28,
72,14,16,27,13,13,14,12,12,12,10,10,10,8,8,8,45,44,44,55,53,54,31,29,30,1,1,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,56,53,54,78,75,75,
37,37,37,13,13,13,13,13,13,15,15,15,17,17,17,20,20,20,22,22,22,25,25,25,28,28,
28,30,30,30,34,34,34,38,38,38,40,40,40,44,44,44,46,46,46,49,49,49,53,53,57,55,
55,56,55,55,56,60,61,66,62,65,82,66,73,102,79,102,147,68,82,139,61,75,139,60,
86,174,59,98,206,62,113,236,89,137,247,130,170,240,188,212,245,205,227,247,204,
225,252,191,219,253,182,211,254,147,186,253,101,154,255,62,128,255,33,101,253,
23,78,217,21,62,175,19,50,136,18,34,94,14,22,60,12,13,23,11,11,13,10,10,10,8,8,
8,33,33,33,56,54,55,42,41,42,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,4,4,4,44,42,42,75,72,72,44,44,44,12,12,12,12,12,12,12,12,12,16,16,
16,17,17,17,21,21,21,23,23,23,26,26,26,28,28,28,32,32,32,35,35,35,38,38,45,41,
46,68,44,44,60,46,51,79,50,63,111,65,99,167,78,100,157,58,64,81,54,55,59,54,55,
59,56,59,82,56,65,125,56,76,161,78,125,215,117,171,244,135,185,253,163,197,255,
181,206,250,206,225,249,209,229,249,206,228,250,208,228,250,208,228,248,201,228,
252,161,195,255,89,149,255,43,114,255,24,90,243,20,68,197,17,52,158,14,42,121,
13,32,83,15,13,48,9,10,22,8,8,10,8,8,10,21,21,22,55,55,56,47,46,47,8,8,8,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,34,33,33,70,68,68,59,57,
57,11,11,11,11,11,11,11,11,11,15,15,15,15,15,15,19,19,19,20,20,21,23,23,24,27,
27,30,30,30,35,32,32,48,37,85,186,60,155,247,74,165,250,75,162,247,80,173,254,
84,174,255,88,174,255,62,96,159,52,50,54,52,51,59,51,64,127,74,130,226,93,151,
241,123,183,255,134,187,255,146,189,253,157,196,252,176,206,250,202,225,251,207,
230,247,204,230,248,204,230,248,204,230,248,204,230,248,193,220,253,115,165,255,
57,123,255,22,96,252,18,71,212,17,52,169,13,41,125,13,31,88,14,16,49,8,10,22,7,
8,12,6,7,25,20,39,93,71,82,97,47,46,47,20,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,26,27,66,64,65,70,68,69,10,10,10,10,10,10,10,
10,10,15,14,16,16,20,51,18,47,116,23,71,159,34,81,166,37,89,187,48,115,211,48,
115,224,50,152,253,59,160,255,65,164,255,71,166,255,79,166,255,80,171,255,88,
176,255,87,162,242,70,117,189,66,98,177,63,119,217,102,173,254,115,178,255,121,
181,255,135,186,255,142,189,254,155,197,254,170,202,249,195,223,247,201,226,250,
204,229,247,203,228,252,203,228,252,203,228,252,197,223,255,117,174,255,61,126,
255,23,101,254,19,75,226,18,56,177,13,46,136,11,32,101,10,19,63,7,8,36,7,9,56,
31,93,200,110,171,250,113,147,184,49,48,49,29,29,29,2,2,2,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,18,18,62,60,60,71,69,70,14,14,14,9,9,9,9,
9,9,12,18,64,16,99,223,20,132,255,22,138,255,30,139,255,37,143,255,42,147,255,
49,152,255,56,158,255,57,159,255,63,161,255,69,163,255,74,166,255,79,168,255,
84,170,255,86,170,255,91,171,255,97,172,255,103,174,255,106,176,255,112,178,
255,114,178,255,123,180,255,132,185,254,145,192,253,161,200,253,174,214,248,199,
225,251,204,222,249,203,223,246,199,226,249,199,226,249,192,220,254,113,169,255,
52,126,255,24,94,254,16,69,215,15,53,168,12,44,133,13,31,100,9,23,75,8,14,53,8,
38,126,71,142,239,106,170,254,130,175,225,51,50,50,40,40,40,2,2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,59,57,58,71,69,69,24,23,23,9,
9,16,11,34,128,14,105,234,15,128,253,20,134,255,23,137,255,28,141,255,34,144,
255,43,148,255,48,151,255,53,154,255,54,155,255,64,158,255,68,160,255,73,165,
255,76,166,255,85,168,255,89,169,255,89,169,255,98,171,255,102,173,255,107,175,
255,109,175,255,113,176,255,120,180,255,128,184,255,142,190,255,154,194,252,165,
203,249,188,216,249,202,226,249,199,230,245,197,230,245,197,230,245,190,218,253,
97,155,255,42,118,255,19,89,249,13,63,198,13,49,153,11,36,120,9,29,91,7,22,70,
7,20,98,39,106,212,97,161,247,108,171,250,129,185,252,70,78,88,42,42,42,8,8,8,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,54,52,52,71,68,69,
32,50,116,8,71,192,9,115,249,11,124,255,14,128,255,20,130,255,23,134,255,30,
140,255,34,142,255,41,146,255,46,150,255,51,152,255,58,156,255,63,158,255,66,
160,255,70,161,255,73,162,255,78,163,255,86,165,255,90,165,255,95,168,255,99,
171,255,102,172,255,102,172,255,111,176,255,117,177,255,125,182,255,138,187,254,
144,190,254,159,195,253,165,200,249,189,216,250,196,224,247,196,224,248,196,223,
250,169,204,255,69,134,255,27,103,255,14,79,231,15,57,192,16,45,149,8,34,102,8,
23,90,12,48,147,74,132,237,106,167,255,101,166,253,103,166,253,119,179,254,92,
108,129,43,43,43,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
5,5,5,44,42,43,66,63,64,40,123,206,8,127,255,9,121,255,10,122,255,15,125,255,
18,129,255,26,135,255,29,136,255,35,140,255,36,141,255,43,146,255,51,151,255,
57,152,255,59,154,255,63,156,255,67,157,255,73,161,255,75,162,255,81,163,255,
86,165,255,91,167,255,97,168,255,101,170,255,104,171,255,107,174,255,115,176,
255,119,181,255,126,183,255,130,186,255,142,191,253,146,194,253,161,205,246,181,
211,243,186,213,249,184,214,254,124,179,255,39,111,255,18,87,246,14,64,201,13,
48,159,14,37,135,8,31,104,6,24,80,19,66,177,98,164,253,103,167,253,100,164,251,
99,163,252,112,174,254,110,144,182,45,44,44,28,27,27,2,2,2,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,33,32,32,62,60,61,50,123,188,10,129,255,10,
119,255,13,122,255,16,122,255,21,128,255,27,132,255,28,132,255,35,137,255,37,
138,255,42,143,255,51,150,255,54,151,255,57,153,255,60,154,255,64,156,255,70,
158,255,72,158,255,79,160,255,84,162,255,88,162,255,89,162,255,96,166,255,99,
171,255,99,168,255,107,172,255,107,172,255,118,180,254,119,180,253,128,184,254,
132,187,246,140,189,253,149,192,253,156,200,250,153,204,253,71,148,255,22,91,
250,17,66,210,14,55,173,10,40,141,12,29,115,7,25,90,7,21,83,26,84,190,97,163,
253,102,166,254,101,165,254,97,161,255,104,168,254,115,154,197,47,47,47,37,37,
37,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,25,25,58,56,
57,64,109,145,15,138,255,14,120,255,16,121,255,17,122,255,18,124,255,21,127,
255,26,130,255,33,135,255,36,137,255,40,140,255,45,144,255,52,147,255,55,149,
255,58,151,255,64,153,255,67,155,255,73,156,255,78,157,255,81,159,255,83,160,
255,88,160,255,92,161,255,95,164,255,100,165,255,98,164,255,107,171,255,108,172,
255,115,174,255,117,177,255,119,180,254,129,185,255,130,183,252,135,186,252,109,
173,255,25,101,249,17,70,219,12,50,176,9,40,137,9,32,116,9,26,88,7,21,76,6,21,
98,55,126,236,100,164,253,102,163,255,103,164,255,103,164,255,113,174,255,92,
116,143,49,49,49,38,38,38,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,20,20,20,55,53,53,72,102,123,33,152,255,28,132,255,24,125,255,22,
122,255,21,121,255,22,123,255,28,129,255,30,129,255,34,132,255,38,136,255,43,
140,255,50,144,255,54,147,255,56,148,255,60,148,255,62,148,255,69,152,255,72,
154,255,74,155,255,75,156,255,82,158,255,89,160,255,91,161,255,95,161,255,95,
161,255,101,167,255,104,169,255,108,171,255,108,171,255,113,172,255,116,172,255,
120,176,252,113,173,253,36,96,227,12,62,198,13,50,168,10,40,140,11,32,112,7,26,
85,6,20,70,6,13,62,5,18,93,59,129,231,118,180,255,121,181,255,127,185,254,131,
178,231,97,124,155,52,53,54,49,49,49,50,50,50,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,51,50,50,66,83,98,49,162,255,37,139,
255,33,131,255,23,121,255,23,121,255,23,121,255,28,126,255,30,127,255,32,128,
255,39,135,255,42,136,255,44,136,255,51,140,255,55,142,255,58,144,255,62,146,
255,65,148,255,65,148,255,70,151,255,72,152,255,75,153,255,84,156,255,89,157,
255,87,155,255,87,155,255,93,161,255,99,164,255,98,166,255,100,166,255,103,166,
255,108,169,255,106,171,253,114,169,255,47,98,210,12,44,151,11,37,136,8,35,112,
9,28,104,8,24,88,18,27,68,29,32,65,44,76,153,108,152,197,103,127,155,95,107,
122,76,85,94,65,65,65,70,70,69,77,76,74,75,74,73,59,59,58,8,8,8,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,49,47,48,61,63,65,59,163,243,37,
137,255,34,129,255,23,119,255,22,118,255,22,118,255,26,122,255,29,125,255,32,
129,255,36,130,255,40,130,255,43,133,255,45,135,255,52,137,255,55,140,255,60,
143,255,65,144,255,65,144,255,69,147,255,70,148,255,72,149,255,76,150,255,80,
153,255,85,156,255,85,155,255,89,157,255,90,158,255,94,166,255,96,167,255,107,
167,255,107,166,255,114,177,255,119,186,255,88,144,233,33,59,154,39,62,130,44,
57,110,52,59,94,66,66,86,61,62,70,63,63,65,74,74,73,82,82,81,84,84,82,82,82,80,
78,78,76,60,59,58,42,42,42,29,29,28,20,20,19,6,6,6,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,41,40,40,56,55,55,64,154,223,37,137,255,
33,127,255,24,118,255,24,118,255,24,118,255,24,118,255,25,120,255,30,124,255,
33,125,255,39,129,255,41,130,255,45,131,255,47,132,255,53,136,255,56,136,255,
58,138,255,59,140,255,65,144,255,68,146,255,71,148,255,75,149,255,75,152,254,
86,156,255,89,157,255,95,161,255,104,171,255,109,178,255,121,186,255,136,189,
250,133,176,226,119,159,199,110,133,155,98,110,125,69,74,88,76,75,76,88,87,86,
95,94,93,93,92,90,90,90,88,79,78,77,55,55,54,36,36,36,25,25,25,14,14,14,3,3,3,
4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,3,3,3,33,32,32,53,52,52,65,140,201,40,139,255,33,125,255,23,115,
255,23,115,255,23,115,255,23,115,255,24,116,255,28,120,255,33,124,255,35,125,
255,40,127,255,43,128,255,46,131,255,50,133,255,53,133,255,58,137,255,60,141,
255,67,149,255,74,154,255,76,158,255,80,165,255,91,170,255,110,181,255,123,180,
238,114,165,215,108,143,181,104,121,139,92,104,117,83,86,91,88,87,86,97,97,95,
100,99,98,97,97,95,91,91,90,71,70,69,46,45,45,31,30,30,20,20,19,6,6,6,4,4,4,5,5,
5,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,24,24,24,49,48,48,63,115,160,39,
141,255,35,123,255,23,114,255,16,112,255,18,113,255,21,114,255,22,114,255,27,
117,255,33,120,255,35,123,255,39,129,255,44,133,255,47,138,255,54,147,255,59,
153,255,66,160,255,78,169,255,95,178,247,103,167,225,94,149,197,97,127,153,92,
110,128,83,93,104,85,85,85,97,96,95,103,102,100,102,101,99,99,98,96,84,83,82,58,
58,57,38,37,36,26,25,25,14,13,13,3,3,3,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,46,46,46,66,93,114,40,
147,255,35,124,255,23,113,255,17,109,255,21,113,255,21,116,255,26,122,255,31,
128,255,38,136,255,41,144,255,53,153,255,71,167,253,80,164,234,81,151,210,85,
133,173,90,116,137,80,98,114,81,85,90,91,90,90,102,101,99,103,102,100,100,100,
97,93,92,90,70,70,69,46,46,45,32,32,31,21,21,21,6,6,6,4,4,4,5,5,5,2,2,2,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,14,13,13,43,43,43,55,57,59,50,133,210,38,138,255,34,132,255,
23,131,255,26,136,255,41,149,255,55,152,240,64,146,219,68,132,192,79,116,147,
76,101,121,73,85,96,81,81,80,94,93,91,98,98,96,98,98,95,96,95,94,78,77,76,55,
54,53,36,35,34,26,25,25,12,12,12,2,2,2,6,6,6,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,42,42,42,51,50,50,55,60,65,58,93,127,57,
105,153,63,100,132,68,95,115,64,78,92,70,72,73,81,80,79,89,88,86,89,88,87,90,90,
88,81,81,80,62,61,60,40,40,39,29,29,29,17,16,17,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,3,3,3,53,52,51,64,63,62,64,63,62,69,68,67,74,74,73,78,78,76,79,79,77,77,
76,75,62,61,60,44,44,43,31,31,30,22,22,22,8,8,8,2,2,2,6,6,6,3,3,3,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,16,16,16,49,49,48,61,61,60,47,46,46,
33,33,33,25,25,24,12,12,12,2,2,2,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,
5,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_video(idata_video, 64, 64, 3, 0);

void CaptureForm::cb_PlayPauseButton_i(Fl_Button*, void*) {
  PlayPause();
}
void CaptureForm::cb_PlayPauseButton(Fl_Button* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_PlayPauseButton_i(o,v);
}

static unsigned char idata_play[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,41,33,21,97,77,54,138,110,76,170,133,87,182,141,
92,162,127,85,127,102,71,81,65,44,22,17,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,11,8,5,107,85,59,209,169,127,250,207,173,255,215,190,255,216,200,255,
216,202,255,216,201,255,216,199,255,214,192,254,209,177,245,199,157,178,141,98,
72,57,37,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,82,65,44,223,183,142,255,214,192,254,216,205,
254,216,205,255,215,204,255,215,203,255,215,201,255,214,199,255,213,197,255,212,
196,255,212,194,255,211,192,255,211,187,252,204,162,187,148,101,41,32,20,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,6,3,
151,121,85,252,210,181,254,216,204,255,216,205,255,215,204,255,215,202,255,214,
197,250,208,186,238,197,177,234,193,170,242,200,176,254,209,183,255,210,186,255,
209,186,255,209,183,255,208,179,255,207,172,239,188,135,92,71,46,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,4,176,142,105,254,214,
194,255,216,204,255,215,203,255,214,200,233,196,183,191,171,167,176,160,149,203,
192,182,219,211,203,222,215,207,215,205,196,203,188,175,203,175,150,219,176,143,
254,204,169,255,205,170,255,203,166,255,202,162,251,196,139,110,85,59,1,1,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,161,129,91,255,215,195,255,
215,202,255,214,199,254,211,191,210,174,150,160,155,154,169,184,207,163,179,204,
158,170,193,186,192,206,231,233,236,242,242,242,242,242,242,243,243,243,231,227,
222,204,181,157,231,181,135,255,200,154,255,199,151,255,196,145,251,190,125,91,
69,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,81,52,254,213,187,
255,214,198,255,213,197,249,206,185,201,175,152,224,221,218,166,175,185,173,191,
214,172,192,218,161,182,212,137,158,196,117,135,174,159,169,192,224,228,233,240,
240,240,241,241,241,241,241,241,217,207,195,217,171,121,255,193,132,255,191,126,
255,188,117,239,176,95,42,33,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,21,12,
238,194,155,255,213,196,255,212,195,253,208,185,208,183,160,246,245,244,231,230,
231,155,167,185,171,192,219,181,201,227,173,197,227,154,180,216,118,149,196,80,
111,170,78,103,155,146,160,187,227,230,236,246,246,246,247,247,247,232,226,217,
221,168,104,255,183,103,255,181,94,255,179,85,188,136,63,3,2,2,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,143,114,80,255,212,192,255,211,192,255,210,187,215,181,148,239,
237,235,240,240,240,221,221,221,133,152,177,155,182,219,184,204,232,183,204,233,
171,197,229,137,172,216,96,138,196,81,120,182,72,105,167,73,99,152,139,154,180,
220,224,230,240,240,240,224,212,193,237,167,74,255,175,72,255,172,64,253,171,60,
72,54,25,0,0,0,0,0,0,0,0,0,0,0,0,13,10,6,238,193,151,255,210,188,255,209,186,
237,192,154,228,219,209,243,243,243,243,243,242,220,220,221,106,134,170,125,164,
215,173,197,230,189,209,235,184,206,235,158,190,228,119,163,214,100,149,206,87,
133,193,77,117,180,66,101,164,68,94,148,144,157,185,227,230,235,217,181,128,254,
168,51,255,167,46,255,166,43,177,125,48,0,0,0,0,0,0,0,0,0,0,0,0,85,64,37,255,
209,180,255,208,181,255,207,177,223,191,155,247,247,246,246,247,247,246,246,246,
221,222,222,96,129,171,91,141,206,148,181,223,179,202,232,184,206,234,168,195,
229,139,176,220,123,165,217,105,154,212,87,139,202,72,122,188,57,102,170,41,80,
150,44,74,134,137,143,162,225,153,50,255,166,40,255,166,40,244,164,47,21,16,9,0,
0,0,0,0,0,0,0,0,148,118,82,255,207,174,255,206,172,250,199,154,224,209,190,
239,240,239,239,239,239,239,239,239,213,213,214,91,126,170,78,133,203,111,155,
213,149,181,223,164,192,227,158,186,225,137,172,218,125,165,215,110,156,213,88,
142,207,65,126,198,39,104,183,16,80,164,3,59,145,1,46,129,43,49,82,173,121,59,
249,164,45,253,166,45,74,54,24,0,0,0,0,0,0,0,0,0,198,155,109,255,204,166,255,
203,163,236,182,126,242,238,233,244,244,244,244,244,244,244,244,243,215,216,217,
92,128,175,84,138,208,103,152,213,116,159,215,128,166,214,128,164,213,117,157,
209,111,154,208,101,147,206,87,138,203,70,128,199,51,116,196,32,105,191,17,91,
182,7,80,171,3,60,144,4,43,111,74,74,81,205,143,59,120,84,30,0,0,0,0,0,0,0,0,0,
229,176,117,255,201,156,255,199,151,231,183,126,248,246,243,246,246,246,246,246,
246,245,245,246,215,217,217,94,131,178,91,144,210,112,159,216,121,163,216,123,
163,215,126,164,214,129,165,214,129,165,215,125,163,213,118,160,212,110,154,210,
101,149,209,90,142,206,78,135,203,66,125,199,45,107,185,24,85,161,20,75,147,33,
70,118,70,72,71,0,0,0,0,0,0,0,0,0,245,185,116,255,196,142,255,194,135,232,184,
123,241,239,236,238,238,238,238,238,238,237,237,237,209,210,211,93,130,177,97,
148,212,120,165,219,131,171,220,137,173,219,143,176,219,148,179,221,153,182,221,
151,181,221,147,179,220,142,176,219,137,173,218,134,171,219,129,169,218,123,165,
218,108,155,214,76,131,200,66,123,195,57,113,183,49,96,158,30,46,66,0,0,0,0,0,0,
234,174,100,255,190,122,255,187,113,236,182,111,248,247,243,246,246,246,246,246,
246,245,245,245,214,215,217,98,135,181,108,156,217,134,174,225,147,183,226,155,
187,226,164,191,226,171,196,229,176,200,231,176,201,233,170,201,235,167,201,238,
164,203,242,160,204,246,157,206,248,154,205,250,141,197,247,114,176,241,104,168,
238,89,155,231,66,113,169,16,23,31,0,0,0,0,0,0,205,149,78,255,183,99,255,180,90,
240,172,81,247,243,237,245,245,245,245,245,245,244,244,244,213,214,216,103,139,
182,115,163,220,143,181,228,159,192,230,168,197,231,178,203,233,186,209,237,191,
215,241,190,219,247,188,222,250,182,225,253,179,229,255,175,234,255,172,237,255,
169,237,255,154,225,254,133,208,255,129,194,240,113,130,137,59,48,29,0,0,0,0,0,
0,0,0,0,161,114,52,255,176,77,255,173,69,249,169,61,237,223,201,239,239,239,
239,239,239,238,238,238,209,210,211,106,140,182,121,167,222,150,187,230,168,199,
234,178,206,237,188,214,242,196,223,248,200,231,252,199,238,254,196,243,255,192,
247,255,188,251,255,184,254,255,180,255,255,174,253,255,156,234,249,131,170,174,
125,102,58,161,106,27,60,42,16,0,0,0,0,0,0,0,0,0,100,68,23,255,169,56,255,167,
49,254,167,47,241,203,145,247,246,246,246,246,246,245,245,245,216,216,218,113,
145,186,129,173,227,161,197,238,178,210,244,189,221,249,197,231,254,205,243,254,
209,253,255,207,255,255,203,255,255,198,255,255,194,255,255,188,255,255,184,254,
254,163,219,218,126,120,83,150,99,27,190,123,29,218,143,37,24,18,9,0,0,0,0,0,0,
0,0,0,25,18,7,247,162,40,255,166,41,255,166,40,244,172,68,244,238,227,243,243,
243,243,243,243,214,215,215,117,149,186,136,180,230,167,205,244,186,223,252,195,
237,255,204,249,254,209,254,255,210,255,255,209,255,255,205,255,255,198,255,255,
193,255,255,175,229,230,137,163,164,136,121,92,180,118,31,218,141,34,244,158,38,
185,125,36,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,167,112,30,255,166,40,255,166,40,254,
167,44,241,199,136,241,240,238,239,239,239,212,213,214,121,151,186,141,186,235,
173,216,251,192,239,255,200,252,255,207,255,255,210,255,255,211,255,255,208,255,
255,200,255,255,182,232,232,141,166,168,132,137,137,167,160,149,205,144,58,240,
155,38,252,163,40,253,165,42,86,60,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,31,10,
248,163,40,255,166,40,255,166,40,250,168,52,246,221,180,247,247,246,221,221,222,
131,159,191,150,197,244,183,231,255,200,252,255,206,255,255,210,255,255,211,255,
255,208,255,255,190,232,233,147,170,171,135,140,140,167,167,167,204,199,193,228,
176,100,250,163,42,255,165,41,255,166,45,204,140,46,6,5,3,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,136,94,27,254,166,39,255,166,41,255,166,40,249,170,60,242,214,
173,219,219,217,136,162,191,154,206,250,187,243,255,201,255,255,204,255,255,206,
255,255,185,225,226,146,166,167,133,137,137,163,163,164,196,196,196,225,219,209,
238,187,115,253,166,46,255,165,43,255,167,50,247,167,57,63,46,20,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,2,196,134,35,255,166,40,255,166,40,255,166,40,
251,169,53,226,185,124,145,164,177,158,218,253,186,251,255,198,252,253,171,210,
211,139,156,156,134,137,138,165,164,164,195,196,196,224,223,219,240,221,191,246,
183,93,254,166,46,255,166,48,255,168,55,253,171,63,123,89,38,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,17,6,209,145,39,255,166,39,255,166,40,
255,166,40,238,156,40,151,126,84,141,185,201,149,177,167,135,143,135,148,146,
142,176,174,169,210,205,196,232,222,204,242,217,177,245,191,110,251,169,56,255,
166,46,255,168,52,255,169,61,254,173,69,147,107,49,4,3,2,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,16,5,191,134,37,254,166,38,255,166,
40,245,159,39,190,124,31,147,98,28,163,108,30,186,128,48,211,151,67,233,169,80,
241,172,76,249,172,61,253,167,46,255,166,44,255,167,50,255,169,57,255,171,67,
249,173,75,132,96,45,5,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,7,5,2,127,92,27,243,165,40,253,164,38,235,151,37,220,143,
35,232,150,36,245,160,39,253,164,40,255,166,40,255,166,40,255,165,43,255,166,
47,255,168,55,255,170,64,255,174,71,220,157,72,76,58,29,1,1,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,
27,8,152,109,30,235,162,42,252,167,37,254,166,38,255,166,40,255,166,40,255,165,
41,255,166,45,255,167,52,254,170,59,253,175,69,217,156,69,115,87,42,15,12,5,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,12,3,83,62,21,141,102,29,182,129,30,208,
146,37,215,151,44,203,145,45,173,124,44,126,94,42,61,46,21,7,5,3,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_play(idata_play, 32, 32, 3, 0);

void CaptureForm::cb_Position_i(Fl_Value_Slider*, void*) {
  Position_CB();
}
void CaptureForm::cb_Position(Fl_Value_Slider* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_Position_i(o,v);
}

void CaptureForm::cb_5_i(Fl_Button*, void*) {
  Snapshot();
}
void CaptureForm::cb_5(Fl_Button* o, void* v) {
  ((CaptureForm*)(o->parent()->user_data()))->cb_5_i(o,v);
}

static unsigned char idata_snashot[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,53,50,36,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,
66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,71,66,43,
71,66,43,71,66,43,71,66,43,24,24,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,127,42,
247,220,72,247,220,72,247,220,72,247,221,78,247,222,83,247,222,83,247,222,83,
247,222,83,247,222,83,247,222,83,247,222,83,247,222,83,247,222,83,247,222,83,
247,221,78,247,220,72,247,222,83,234,201,23,24,24,20,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,113,102,41,193,173,49,193,173,49,193,173,49,193,174,52,193,174,54,193,174,
54,193,174,54,193,174,54,193,174,54,193,174,54,193,174,54,193,174,54,193,174,
54,193,174,52,193,173,49,193,173,49,193,174,54,182,158,29,39,38,32,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,106,96,39,178,158,44,175,154,37,175,154,37,175,154,37,175,
154,37,175,154,37,175,154,37,175,154,37,175,154,37,175,154,37,175,154,37,175,
154,37,175,154,37,175,154,37,175,154,37,175,154,37,178,158,44,145,127,28,39,38,
32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,100,42,238,220,119,235,213,91,235,213,91,
235,214,97,235,214,97,235,214,97,235,214,97,235,214,97,235,214,97,235,214,97,
235,214,97,235,214,97,235,214,97,235,214,97,235,214,94,235,213,91,238,220,119,
179,161,63,42,40,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,100,42,250,232,130,248,
225,96,248,226,100,249,227,107,249,227,108,249,228,110,249,228,111,249,228,111,
249,228,111,249,228,111,249,228,111,249,228,110,249,227,108,249,227,108,249,227,
104,248,225,96,253,237,129,185,167,70,42,40,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
111,100,42,250,230,121,247,224,91,247,224,91,248,225,98,248,225,100,248,225,100,
248,225,100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,
100,248,225,100,248,225,98,247,224,91,255,238,107,185,167,70,42,40,33,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,111,100,42,250,230,121,247,222,83,248,224,95,248,225,98,
248,225,100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,
100,248,225,100,248,225,100,248,225,98,248,224,95,247,224,91,255,238,107,173,
154,56,42,40,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,100,42,249,228,108,247,222,83,
247,224,91,248,224,93,248,225,98,248,225,100,248,225,100,248,225,100,248,225,
100,248,225,100,248,225,100,248,225,100,248,225,98,248,224,95,248,224,93,247,
222,83,255,238,107,173,154,56,42,40,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,100,
42,249,228,108,247,222,83,247,224,91,248,224,93,248,224,95,248,225,98,248,225,
100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,100,248,225,98,248,
224,93,247,224,91,247,222,83,255,238,107,173,154,56,42,40,33,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,102,94,41,249,227,104,247,222,83,247,224,91,248,224,92,248,224,93,
248,224,94,248,225,98,248,225,100,248,225,100,248,225,100,248,225,100,248,225,
98,248,224,94,248,224,93,248,223,88,247,222,83,255,238,107,162,145,54,39,38,32,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,94,41,248,225,100,247,222,83,247,223,87,248,
224,92,248,224,92,248,224,93,248,225,98,248,225,100,248,225,100,248,225,100,248,
225,100,248,225,98,248,224,93,247,224,91,247,223,87,247,222,83,255,238,107,151,
135,52,35,35,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,94,41,248,225,100,247,222,83,
247,223,87,248,224,93,248,224,93,248,225,95,248,225,99,248,225,100,248,225,100,
248,225,100,248,225,100,248,225,97,248,224,93,247,224,91,247,224,89,247,222,83,
255,238,107,151,135,52,35,35,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,90,41,248,225,
100,247,222,83,247,223,87,248,224,91,248,224,93,248,225,95,248,225,98,248,225,
100,248,225,100,248,225,100,248,225,100,248,224,95,248,224,93,247,224,91,247,
224,89,247,222,83,255,238,107,151,135,52,35,35,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
95,86,41,247,224,91,247,222,83,247,222,83,247,223,87,247,224,91,247,224,91,247,
224,91,248,224,95,247,224,91,247,224,91,248,224,95,247,224,91,247,224,91,247,
223,87,247,222,83,247,222,83,255,236,97,146,129,32,35,35,30,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,101,91,35,247,222,83,247,222,83,247,222,83,247,222,83,247,222,83,
247,223,87,247,224,91,247,224,91,247,224,91,247,224,91,247,224,91,247,224,91,
247,223,87,247,222,83,247,222,83,247,220,72,255,236,97,146,129,32,35,35,30,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,101,91,35,247,224,91,247,220,72,247,222,83,247,222,
83,247,222,83,247,223,87,247,224,91,247,224,91,247,224,91,247,224,91,247,224,
91,247,222,83,247,222,83,247,222,83,247,222,83,247,220,72,255,236,97,146,129,
32,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,91,35,247,222,83,247,220,72,247,
220,72,247,221,78,247,222,83,247,222,83,247,222,83,247,222,83,247,222,83,247,
222,83,247,222,83,247,222,83,247,222,83,247,221,78,247,220,72,247,220,72,255,
236,97,144,124,16,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,91,35,247,219,65,
247,219,65,246,217,57,247,219,65,247,220,69,247,220,72,247,220,72,247,220,72,
247,220,72,247,220,72,247,220,72,247,219,65,247,220,69,247,220,69,247,219,65,
246,217,57,251,229,90,144,124,16,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,91,
35,246,217,57,246,217,57,246,217,57,246,217,57,247,218,61,247,219,65,247,219,
65,247,219,65,247,219,65,247,219,65,247,219,65,246,217,57,247,218,61,247,218,
61,246,217,57,246,216,49,251,225,66,145,124,8,38,37,35,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,101,91,35,246,216,49,246,217,57,246,216,49,246,216,49,246,216,49,246,
216,49,246,217,53,246,217,57,246,217,57,246,217,57,246,217,57,246,217,57,246,
217,53,246,216,49,246,216,49,245,214,40,255,227,48,141,120,0,46,45,40,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,98,88,33,246,213,33,246,216,49,246,213,33,245,214,40,245,
214,40,245,214,40,246,215,45,246,216,49,246,216,49,246,216,49,246,216,49,246,
216,49,246,215,45,245,214,40,245,214,40,246,213,33,255,227,48,134,113,0,58,56,
44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,85,31,246,212,25,245,214,40,246,212,25,246,
212,25,246,213,33,245,214,40,245,214,40,245,214,40,245,214,40,245,214,40,245,
214,40,245,214,40,245,214,40,246,213,33,246,212,25,246,212,25,255,227,48,137,
116,0,69,66,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,
92,48,100,92,48,53,50,36,71,66,43,12,12,10,21,20,17,59,56,40,95,88,48,102,87,0,
234,201,23,246,212,25,243,209,18,245,211,22,245,211,22,245,211,22,246,212,25,
246,212,25,246,212,25,246,212,25,246,212,25,246,212,25,246,212,25,246,212,25,
245,211,22,243,209,18,245,214,40,130,110,0,141,124,32,95,87,49,95,87,49,95,87,
49,98,90,49,100,92,48,100,92,48,95,87,49,53,50,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,157,1,243,
209,18,233,197,0,240,204,1,190,163,16,190,163,16,218,186,8,243,207,6,97,81,1,
234,201,23,243,209,18,245,209,10,243,209,18,243,209,18,243,209,18,243,209,18,
243,209,18,243,209,18,243,209,18,243,209,18,243,209,18,243,209,18,244,209,14,
245,209,10,245,209,10,245,214,40,117,99,0,204,173,1,243,207,6,240,204,1,240,204,
1,240,204,1,233,197,0,245,209,10,213,180,1,130,117,43,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,157,1,
233,197,0,246,212,25,245,209,10,245,209,10,245,209,10,246,211,18,246,212,25,105,
89,1,234,201,23,245,209,10,240,204,1,245,209,10,245,209,10,245,209,10,245,209,
10,245,209,10,245,209,10,245,209,10,245,209,10,245,209,10,245,209,10,245,209,
10,243,207,6,240,204,1,246,212,25,117,99,0,213,180,1,246,211,18,245,209,10,245,
209,10,245,209,10,243,209,18,240,204,1,213,180,1,130,117,43,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,70,0,
155,134,16,165,143,16,215,187,33,210,187,54,213,189,55,217,193,63,214,190,57,
165,139,1,237,201,1,232,197,1,233,197,0,237,201,1,237,201,1,237,201,1,237,201,1,
237,201,1,237,201,1,237,201,1,237,201,1,237,201,1,237,201,1,237,201,1,237,201,1,
229,193,0,235,199,5,185,157,1,188,164,29,214,191,62,210,187,54,210,187,54,213,
188,49,209,181,23,160,139,23,151,130,15,65,57,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,77,15,
174,150,15,206,177,20,222,195,44,230,202,44,227,200,50,225,198,46,229,193,0,223,
189,1,219,185,1,223,189,1,226,191,1,229,193,0,229,193,0,229,193,0,229,193,0,229,
193,0,229,193,0,229,193,0,229,193,0,229,193,0,226,191,1,223,189,1,219,185,1,219,
185,1,227,192,1,225,195,29,227,200,51,228,200,44,222,195,44,213,187,38,209,179,
13,159,139,31,80,70,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,73,0,172,146,1,185,156,
1,208,176,1,212,180,1,207,176,1,219,185,1,213,180,1,213,180,1,213,180,1,216,
183,1,219,185,1,219,185,1,219,185,1,219,185,1,219,185,1,219,185,1,219,185,1,219,
185,1,219,185,1,216,183,1,213,180,1,213,180,1,213,180,1,213,180,1,209,177,1,212,
179,1,208,176,1,191,161,1,178,151,1,151,130,16,71,62,16,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,89,76,1,171,145,1,186,157,1,206,174,1,213,180,1,205,174,1,
209,177,1,209,177,1,209,177,1,209,177,1,209,177,1,209,177,1,209,177,1,213,180,1,
213,180,1,213,180,1,209,177,1,209,177,1,209,177,1,209,177,1,209,177,1,209,177,1,
209,177,1,205,174,1,209,177,1,208,176,1,194,164,1,179,151,1,162,138,9,65,57,16,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,70,0,166,140,0,165,
139,0,184,156,1,204,173,1,190,160,0,197,167,0,190,160,0,197,167,0,197,167,0,197,
167,0,197,167,0,197,167,0,197,167,0,197,167,0,197,167,0,194,164,0,194,164,0,197,
167,0,197,167,0,197,167,0,190,160,0,197,167,0,213,180,1,171,145,0,169,143,0,140,
121,19,57,51,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,79,67,1,157,133,1,156,132,2,190,160,0,197,167,0,179,152,1,190,160,0,190,160,
0,190,160,0,190,160,0,190,160,0,190,160,0,190,160,0,190,160,0,190,160,0,190,
160,0,190,160,0,190,160,0,190,160,0,179,152,1,190,160,0,197,167,0,164,138,0,164,
139,1,135,117,19,57,51,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,79,67,1,154,130,1,145,123,0,179,152,1,190,160,0,171,
145,0,175,149,1,179,152,1,179,152,1,179,152,1,179,152,1,179,152,1,179,152,1,179,
152,1,179,152,1,179,152,1,179,152,1,175,149,1,179,152,1,190,160,0,154,131,2,164,
138,0,119,104,21,48,43,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,60,8,143,121,0,145,123,0,164,138,0,179,
152,1,168,142,0,171,145,0,171,145,0,171,145,0,171,145,0,171,145,0,171,145,0,171,
145,0,171,145,0,171,145,0,168,142,0,168,142,0,179,152,1,145,123,0,154,131,2,133,
114,2,51,46,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,57,1,125,108,8,132,112,0,142,121,1,
159,135,1,159,135,1,159,135,1,159,135,1,159,135,1,159,135,1,159,135,1,159,135,1,
159,135,1,159,135,1,159,135,1,153,130,1,141,120,0,134,114,1,114,100,18,48,43,16,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,51,7,118,103,12,129,109,0,145,122,0,
153,129,1,152,129,2,150,127,1,150,127,1,150,127,1,150,127,1,150,127,1,152,129,2,
155,131,1,146,123,1,135,114,1,130,110,0,105,91,21,51,46,18,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,49,12,118,103,12,125,106,0,135,115,1,144,122,1,
143,122,0,141,120,0,141,120,0,141,120,0,141,120,0,146,124,1,139,118,1,128,108,0,
122,104,0,105,91,21,48,43,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,55,49,12,114,98,6,120,102,0,128,108,0,134,114,0,134,113,0,134,113,0,
134,113,0,137,116,0,130,110,1,123,104,1,118,100,1,105,91,11,48,43,21,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,43,16,99,86,
16,110,93,0,111,94,1,130,110,0,117,99,0,130,110,0,117,99,0,111,94,1,105,89,1,
97,86,21,51,47,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,48,43,16,99,86,16,104,88,1,97,81,1,137,116,0,105,89,1,
105,89,1,101,85,1,85,75,25,42,40,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,46,18,102,89,18,105,89,
1,105,89,1,105,89,1,105,89,1,85,75,25,42,40,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
48,43,21,102,87,0,97,81,1,97,81,1,85,71,1,42,40,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,48,43,21,78,69,24,78,69,24,32,30,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,32,30,24,32,30,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0};
static Fl_RGB_Image image_snashot(idata_snashot, 64, 64, 3, 0);

CaptureForm::CaptureForm() {
  playing=false;
isSnapshot=false;
Cap=NULL;
  { Fl_Double_Window* o = window = new Fl_Double_Window(736, 665, "Capture \335mage");
    window->color((Fl_Color)31);
    window->user_data((void*)(this));
    window->align(FL_ALIGN_CENTER);
    window->hotspot(window);
    { Ok = new Fl_Return_Button(660, 460, 70, 30, "Ok");
      Ok->box(FL_GLEAM_THIN_UP_BOX);
      Ok->color((Fl_Color)30);
      Ok->callback((Fl_Callback*)cb_Oka);
    } // Fl_Return_Button* Ok
    { videoPad = new Fl_Group(5, 6, 644, 484);
      videoPad->box(FL_EMBOSSED_BOX);
      videoPad->color((Fl_Color)36);
      video=new Fl_OpenCV(videoPad->x()+2,videoPad->y()+2,videoPad->w()-2,videoPad->h()-2);
      video->FitWindows();
      videoPad->end();
    } // Fl_Group* videoPad
    { Fl_Button* o = new Fl_Button(655, 5, 70, 70);
      o->tooltip("Open Web-Cam");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)23);
      o->image(image_camera);
      o->callback((Fl_Callback*)cb_3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(655, 85, 70, 70);
      o->tooltip("Open Video - File");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)23);
      o->image(image_video);
      o->callback((Fl_Callback*)cb_4);
    } // Fl_Button* o
    { PlayPauseButton = new Fl_Button(5, 500, 38, 38);
      PlayPauseButton->tooltip("Play / Pause");
      PlayPauseButton->box(FL_GTK_UP_BOX);
      PlayPauseButton->image(image_play);
      PlayPauseButton->callback((Fl_Callback*)cb_PlayPauseButton);
      PlayPauseButton->deactivate();
    } // Fl_Button* PlayPauseButton
    { Position = new Fl_Value_Slider(50, 500, 675, 35);
      Position->type(3);
      Position->box(FL_PLASTIC_UP_BOX);
      Position->color((Fl_Color)21);
      Position->selection_color((Fl_Color)1);
      Position->maximum(100);
      Position->step(1);
      Position->textsize(14);
      Position->callback((Fl_Callback*)cb_Position);
    } // Fl_Value_Slider* Position
    { Out = new Fl_Browser(5, 550, 725, 105);
      Out->box(FL_GTK_DOWN_BOX);
      Out->color((Fl_Color)FL_DARK3);
    } // Fl_Browser* Out
    { Fl_Button* o = new Fl_Button(655, 165, 70, 70);
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)23);
      o->image(image_snashot);
      o->callback((Fl_Callback*)cb_5);
    } // Fl_Button* o
    o->set_modal();
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
}

void CaptureForm::show() {
  window->show();
}

void CaptureForm::hide() {
  playing=false;
Fl::remove_timeout(CaptureForm::Playing_CB,(void *)this);
delete Cap;
window->hide();
}

void CaptureForm::Playing_CB(void* obj) {
  CaptureForm* c=(CaptureForm *)obj;

if(c->Position->value()>=99.0){
   c->Cap->SetPositionPercent(0);
   c->playing=false;
}
if(c->playing==false) return;
c->video->SetImage(c->Cap->GetFrame());
c->videoPad->redraw();
if(c->Position->visible())
   c->Position->value(c->Cap->GetPositionPercent());

Fl::add_timeout(c->Vtimer,CaptureForm::Playing_CB,obj);
}

void CaptureForm::OpenCam() {
  if(playing) return ;
if(Cap!=NULL)
     delete Cap;
Cap=new Fl_Capture();
if(!Cap->CaptureFromCAM(-1)) return;
file=NULL;
video->SetImage(Cap->GetFrame());
videoPad->redraw();
CaptureForm::playing=true;
Position->hide();
PlayPauseButton->activate();

double fps=Cap->GetFPS();
if(fps ==0.0)
  fps=20;

Vtimer = 1.0 / fps;

Out->add("Capture From Web Cam ");
char Buf[255];
sprintf(Buf, " Capture FPS : %.1lf",fps);
Out->add(Buf);

Fl::add_timeout(Vtimer,CaptureForm::Playing_CB,(void*)this);
}

void CaptureForm::OpenVideo() {
  if(playing) return ;
  file = fl_file_chooser("Open", "Video (*.{avi,dat})\t", 0);
  if(file==NULL) return;

  if(Cap!=NULL)
     delete Cap;

  Cap=new Fl_Capture();
if(!Cap->CaptureFromFile(file)) return;
video->SetImage(Cap->GetFrame());
videoPad->redraw();
CaptureForm::playing=true;
Position->value(0);
Position->show();
PlayPauseButton->activate();
double fps=Cap->GetFPS();
if(fps==0.0)
  fps=20;

Vtimer = 1.0 / fps;

Out->add("Capture From Video File ");
char Buf[255];
sprintf(Buf, " Capture FPS : %.1lf",fps);
Out->add(Buf);   

Fl::add_timeout(Vtimer,CaptureForm::Playing_CB,(void*)this);
}

void CaptureForm::Position_CB() {
  // Out->add("Sorry it doesnt  work because of OpenCV read Reference Manual");

if(Fl::event_is_click())
{
   playing=false;
     double pos=Position->value();
    Cap->SetPositionPercent(Position->value());
   playing=true;
   Fl::add_timeout(Vtimer,CaptureForm::Playing_CB,(void*)this);
   char Buf[255];
   sprintf(Buf, " Position : %.1lf",pos);
   Out->add(Buf);
   Out->add("Postion changed with click");
}
else
  Out->add("Postion changed with time");
}

void CaptureForm::PlayPause() {
  if(Cap==NULL) return;
if(playing)
  playing=false;
else{
  playing=true;
  Fl::add_timeout(Vtimer,CaptureForm::Playing_CB,(void*)this);
}
}

void CaptureForm::Snapshot() {
  if(Cap==NULL) return;
if(playing)
   PlayPause();
isSnapshot=true;
p->CopyFromCapture(getSnapshot(),file);
hide();
}

IplImage * CaptureForm::getSnapshot() {
  if(isSnapshot)
 return cvCloneImage(video->image);
else
 return NULL;
}
